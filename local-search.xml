<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2021/04/16/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/04/16/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>在学习Java网络编程之前，我们先来了解什么是计算机网络。</p><p>==计算机网络是指两台或更多的计算机组成的网络，在同一个网络中，任意两台计算机都可以直接通信，因为所有计算机都需要遵循同一种网络协议。==</p><p>那什么是互联网呢？互联网是网络的网络（internet），即把很多计算机网络连接起来，形成一个全球统一的互联网。</p><p>对某个特定的计算机网络来说，它可能使用网络协议ABC，而另一个计算机网络可能使用网络协议XYZ。如果计算机网络各自的通讯协议不统一，就没法把不同的网络连接起来形成互联网。因此，为了把计算机网络接入互联网，就必须使用TCP/IP协议。</p><p>TCP/IP协议泛指互联网协议，其中最重要的两个协议是TCP协议和IP协议。只有使用TCP/IP协议的计算机才能够联入互联网，使用其他网络协议（例如NetBIOS、AppleTalk协议等）是无法联入互联网的。</p><blockquote><p>==打电话：连接—接了—-通话         这是TCP协议==</p><p>==发短信： 发就完了——接收         UDP协议==</p></blockquote><h3 id="网络编程的目的："><a href="#网络编程的目的：" class="headerlink" title="网络编程的目的："></a>网络编程的目的：</h3><p>无线电台….传播交流信息，数据交换，通信</p><h3 id="想要达到这个效果需要什么："><a href="#想要达到这个效果需要什么：" class="headerlink" title="想要达到这个效果需要什么："></a>想要达到这个效果需要什么：</h3><ol><li>如何准确的定位到一个网络上的一台主机  192.168.16.124：端口 定位到这个计算机上的某个资源</li><li>找到这个主机，如何传输数据呢？</li></ol><h3 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h3><p>如何实现网络的通信？</p><p><strong>通信双方地址：</strong></p><ul><li>ip</li><li>端口号</li><li>例子：192.168.16.124:5900</li></ul><p><strong>规则:网络通信的协议</strong></p><ul><li>TCP/IP参考模型：</li></ul><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png"></p><p>==网络编程是针对传输层的，TCP UDP==</p><ul><li>应用层，提供应用程序之间的通信；</li><li>表示层：处理数据格式，加解密等等；</li><li>会话层：负责建立和维护会话；</li><li>传输层：负责提供端到端的可靠传输；</li><li>网络层：负责根据目标地址选择路由来传输数据；</li><li>链路层和物理层负责把数据进行分片并且真正通过物理网络传输，例如，无线网、光纤等。</li></ul><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ol><li>网络编程中有两个主要问题<ol><li>如何准确定位到网络上的一台或者多台主机     ==ping命令==</li><li>找到主机之后如何进行通信</li></ol></li><li>网络编程中的要输<ol><li>IP和端口号</li><li>网络通信协议  ==UDP   TCP==</li></ol></li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>java里面有一个inetAddress类</p><p>ip地址：InetAddress</p><ul><li><p>唯一定位一个网络上计算机</p></li><li><p>127.0.0.1    ==本机localhost==</p></li><li><p>ip地址的分类</p><ul><li><p>ipv4/ipv6</p><ul><li>==IPV4==：127.0.0.1 ， 4个字节组成，32位，0~255        2011年就用完了</li><li>==IPV6==：128位，8个无符号整数   16进制</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">IPV6形式：刚好八位<br>1111 ；0000：0abc：abcd：123e：1323：0000：0000<br><br>IP地址分为IPv4和IPv6两种。IPv4采用32位地址，类似101.202.99.12，<br>而IPv6采用128位地址，类似2001:0DA8:100A:0000:0000:1020:F2F3:1428。<br>IPv4地址总共有232个（大约42亿），而IPv6地址则总共有2128个（大约340万亿亿亿亿），IPv4的地址目前已耗尽，而IPv6的地址是根本用不完的。<br></code></pre></td></tr></table></figure></li><li><p>公网（互联网） 私网（局域网）</p><ul><li>ABCD类地址==（百度一下）==</li><li>192.168.xx.xx 专门给组织内部使用的（局域网）</li><li>有一个特殊的ip==本机地址==：<code>127.0.0.1</code></li></ul></li><li><p>域名：记忆IP问题（IP太难记了）</p><ul><li>IP: <a href="http://www.vip.com/">www.vip.com</a>   唯品会域名</li></ul></li></ul></li><li><p>网卡</p><ul><li>如果一台计算机有两块网卡，那么除了本机地址，它可以有两个IP地址，可以分别接入两个网络。通常连接两个网络的设备是路由器或者交换机，它至少有两个IP地址，分别接入不同的网络，让网络之间连接起来。</li><li>如果两台计算机位于同一个网络，那么他们之间可以直接通信，==因为他们的IP地址前段是相同的，也就是网络号是相同的。网络号是IP地址通过子网掩码过滤后得到的==。</li><li>例子：某台计算机的IP是<code>101.202.99.2</code>，子网掩码是<code>255.255.255.0</code>，那么计算该计算机的网络号是：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">IP = 101.202.99.2<br>Mask = 255.255.255.0<br>Network = IP &amp; Mask = 101.202.99.0<br></code></pre></td></tr></table></figure><ul><li>==网关==<ul><li>如果两台计算机计算出的网络号不同，那么两台计算机不在同一个网络，不能直接通信，它们之间必须通过路由器或者交换机这样的网络设备间接通信，我们把这种设备称为网关。</li><li>网关的<strong>作用</strong>：连接多个网络，负责把来自一个网络的数据包发送到另一个网络，这个过程叫做==路由==</li></ul></li></ul></li></ul><p>==<strong>所以一台计算机的一个网卡有3个关键配置：</strong>==</p><ul><li>IP地址，例如：<code>10.0.2.15</code></li><li>子网掩码，例如：<code>255.255.255.0</code></li><li>网关的IP地址，例如：<code>10.0.2.2</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson01;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">//测试IP</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInetAdress</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//查询本机地址</span><br>            InetAddress inetAddress = InetAddress.getByName(<span class="hljs-string">&quot;172.0.0.1&quot;</span>);<br>            System.out.println(inetAddress);<br>            InetAddress inetAddress2 = InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>            System.out.println(inetAddress2);<br>            InetAddress inetAddress3 = InetAddress.getLocalHost();<br>            System.out.println(inetAddress3);<br><br>            <span class="hljs-comment">//查询网站ip地址</span><br>            InetAddress inetAddress1 = InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>            System.out.println(inetAddress1);<br><br>            <span class="hljs-comment">//常用方法</span><br>            System.out.println(inetAddress1.getAddress());<br>            System.out.println(inetAddress1.getCanonicalHostName());<br>            System.out.println(inetAddress1.getHostAddress());<br>            System.out.println(inetAddress1.getHostName());<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口表示计算机的一个程序的进程；</p><ul><li><p>不同的进程有不同的端口号！ 用来区分软件！</p></li><li><p>被规定0~65535</p></li><li><p>TCP，UDP端口数：65535*2</p><ul><li>如果tcp用了80   udp也可以用80</li><li>单个协议下，端口号不可以冲突  就是tcp不能有多个80</li></ul></li><li><p>端口分类</p><ul><li>公有端口 0~1023<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telent：23</li></ul></li><li>程序注册端口：1024 - 49151，分配给用户<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>动态、私有：49152~65535</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看所有端口</span><br>netstat -ano<br>netstat -ano|findstr <span class="hljs-string">&quot;5900&quot;</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>协议：相当于约定，就好比我们一般讲话对什么人用什么话</p><p><strong>网络通信协议</strong>：速率，传输码率，代码结构，传输控制….</p><p><strong>问题</strong>：非常的复杂？</p><p>大事化小：分层！</p><p><strong>TCP/IP协议簇</strong>：实际是是一组协议</p><p>重要：</p><ul><li>TCP：用户传输控制协议</li><li>UDP：用户数据报协议</li></ul><p>比较出名的协议：</p><ul><li>TCP：</li><li>IP：网络互连协议</li></ul><h4 id="TCP-UDP对比"><a href="#TCP-UDP对比" class="headerlink" title="TCP  UDP对比"></a>TCP  UDP对比</h4><p><strong>TCP：类似打电话</strong></p><ul><li><p>连接、稳定</p></li><li><p>三次握手、四次挥手</p><blockquote><p>==三次握手==</p><p><strong>刚开始客户端处于 closed 的状态，服务端处于 listen 状态</strong>。然后</p><p>1、第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 **ISN(c)**。此时客户端处于 <strong>SYN_Send</strong> 状态。</p><p>2、第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <strong>SYN_REVD</strong> 的状态。</p><p>3、第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <strong>establised</strong> 状态。</p><p>4、服务器收到 ACK 报文之后，也处于 <strong>establised 状态</strong>，此时，双方以建立起了链接。</p></blockquote><blockquote><p><strong>这里我顺便解释一下为啥只有三次握手才能确认双方的接受与发送能力是否正常，而两次却不可以</strong>：<br>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。<br>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。<br>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</p></blockquote><blockquote><p>==三次握手的作用==也是有好多的，多记住几个，保证不亏。例如：</p><p>1、==确认双方的接受能力、发送能力是否正常==。</p><p>2、指定自己的初始化序列号，为后面的可靠传送做准备。</p><p>3、如果是 https 协议的话，三次握手这个过程，还会进行数字证书的验证以及加密密钥的生成到</p></blockquote><blockquote><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>四次挥手也一样，千万不要==对方一个 FIN 报文，我方一个 ACK 报文，再我方一个 FIN 报文，对方一个 ACK 报文==。然后结束，最好是说的详细一点，例如想下面这样就差不多了，要把每个阶段的<strong>状态</strong>记好，我上次面试就被问了几个了，呵呵。我答错了，还以为自己答对了，当时还解释的头头是道，呵呵。</p><p>刚开始双方都处于 establised 状态，假如是客户端先发起关闭请求，则：</p><p>1、第一次挥手：==客户端==发送一个 ==FIN 报文==，报文中会指定一个序列号。此时客户端处于==<strong>FIN_WAIT1</strong>状态==。</p><p>2、第二次握手：==服务端==收到 FIN 之后，会==发送 ACK 报文==，且把==客户端的序列号值 + 1 作为 ACK 报文的序列号值==，表明已经收到客户端的报文了，此时==服务端处于 <strong>CLOSE_WAIT</strong>状态==。</p><p>3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时==服务端处于 <strong>LAST_ACK</strong> 的状态==。</p><p>4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 <strong>TIME_WAIT</strong> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态</p><p>5、服务端收到 ACK 报文之后，就处于关闭连接了，==处于 CLOSED 状态==。</p></blockquote></li><li><p>客户端、服务端</p></li><li><p>传输完成、释放连接、效率低</p></li></ul><p><strong>UDP：类似发短信</strong></p><ul><li>不连接、不稳定</li><li>客户端、服务端：没有明确的界限</li><li>不管你有没有准备好，都可以发过去</li><li>应用例子：DDOC：洪水攻击（饱和攻击）</li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>在开发网络应用程序的时候，我们又会遇到Socket这个概念。Socket是一个抽象概念，<strong>一个应用程序通过一个Socket来建立一个远程连接</strong>，而<strong>Socket内部通过TCP/IP协议把数据传输到网络：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ascii">┌───────────┐                                   ┌───────────┐<br>│Application│                                   │Application│<br>├───────────┤                                   ├───────────┤<br>│  Socket   │                                   │  Socket   │<br>├───────────┤                                   ├───────────┤<br>│    TCP    │                                   │    TCP    │<br>├───────────┤      ┌──────┐       ┌──────┐      ├───────────┤<br>│    IP     │&lt;────&gt;│Router│&lt;─────&gt;│Router│&lt;────&gt;│    IP     │<br>└───────────┘      └──────┘       └──────┘      └───────────┘<br></code></pre></td></tr></table></figure><p>Socket、TCP和部分IP的功能都是由操作系统提供的，不同的编程语言只是提供了对操作系统调用的简单的封装。例如，Java提供的几个Socket相关的类就封装了操作系统提供的接口。</p><hr><p>==为什么需要Socket进行网络通信？==</p><p>因为仅仅通过IP地址进行通信是不够的，同一台计算机同一时间会运行多个网络应用程序，例如浏览器、QQ、邮件客户端等。当操作系统接收到一个数据包的时候，如果只有IP地址，它没法判断应该发给哪个应用程序，所以，操作系统抽象出Socket接口，每个应用程序需要各自对应到不同的Socket，数据包才能根据Socket正确地发到对应的应用程序。</p><hr><p>一个Socket就是由==IP地址和端口号==（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于<em><strong>特权端口</strong></em>，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。</p><p>==使用Socket进行网络编程时，本质上就是两个进程之间的网络通信==。其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。</p><p>因此，当Socket连接成功地在服务器端和客户端之间建立后：</p><ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul><h4 id="Socket流"><a href="#Socket流" class="headerlink" title="Socket流"></a>Socket流</h4><p>当Socket连接创建成功后，无论是服务器端，还是客户端，我们都使用<code>Socket</code>实例进行网络通信。因为TCP是一种基于流的协议，因此，Java标准库使用<code>InputStream</code>和<code>OutputStream</code>来封装Socket的数据流，这样我们使用Socket的流，和普通IO流类似：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 用于读取网络数据:<br>InputStream <span class="hljs-keyword">in</span> = sock.getInputStream();<br><span class="hljs-regexp">//</span> 用于写入网络数据:<br>OutputStream out = sock.getOutputStream();<br></code></pre></td></tr></table></figure><p>最后我们重点来看看，为什么写入网络数据时，要调用<code>flush()</code>方法。</p><p>如果不调用<code>flush()</code>，我们很可能会发现，客户端和服务器都收不到数据，这并不是Java标准库的设计问题，而是我们以流的形式写入数据的时候，并不是一写入就立刻发送到网络，而是先写入内存缓冲区，直到缓冲区满了以后，才会一次性真正发送到网络，这样设计的目的是为了提高传输效率。如果缓冲区的数据很少，而我们又想强制把这些数据发送到网络，就必须调用<code>flush()</code>强制把缓冲区数据发送出去。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>使用Java进行TCP编程时，需要使用Socket模型：</p><ul><li>服务器端用<code>ServerSocket</code>监听指定端口；</li><li>客户端使用<code>Socket(InetAddress, port)</code>连接服务器；</li><li>服务器端用<code>accept()</code>接收连接并返回<code>Socket</code>；</li><li>双方通过<code>Socket</code>打开<code>InputStream</code>/<code>OutputStream</code>读写数据；</li><li>服务器端通常使用多线程同时处理多个客户端连接，利用线程池可大幅提升效率；</li><li><code>flush()</code>用于强制输出缓冲区到网络。</li></ul><p>客户端</p><ol><li>连接服务器Socket</li><li>发送消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCilent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Socket socket = <span class="hljs-keyword">null</span>;<br>        OutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">//1.要知道服务器的地址，端口号</span><br>            InetAddress serverIP = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            <span class="hljs-keyword">int</span> post = <span class="hljs-number">9999</span>;<br><br>            <span class="hljs-comment">//2.创建一个socket连接</span><br>            socket = <span class="hljs-keyword">new</span> Socket(serverIP, post);<br><br>            <span class="hljs-comment">//3.发生消息   IO流</span><br>            os = socket.getOutputStream();<br>            os.write(<span class="hljs-string">&quot;你好，我就是太阳&quot;</span>.getBytes());<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (os!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    os.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (socket != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>服务器</p><ol><li>建立服务端口ServerSocket、</li><li>等待用户连接 accept</li><li>接收用的消息</li></ol><ul><li>注意到代码<code>serverSocket.accept()</code>表示每当有新的客户端连接进来后，就返回一个<code>Socket</code>实例，这个<code>Socket</code>实例就是用来和刚连接的客户端进行通信的。由于客户端很多，要实现并发处理，我们就必须为每个新的<code>Socket</code>创建一个新线程来处理，这样，主线程的作用就是接收新的连接，每当收到新连接后，就创建一个新线程进行处理。</li><li>如果没有客户端连接进来，<code>accept()</code>方法会阻塞并一直等待。如果有多个客户端同时连接进来，<code>ServerSocket</code>会把连接扔到队列里，然后一个一个处理。对于Java程序而言，只需要通过循环不断调用<code>accept()</code>就可以获取新的连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">//服务器端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;<br>        Socket socket = <span class="hljs-keyword">null</span>;<br>        InputStream is = <span class="hljs-keyword">null</span>;<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.我有一个地址</span><br>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-comment">//2.等待客户端连接过来</span><br>                socket = serverSocket.accept();<br>                <span class="hljs-comment">//读取客户端的消息</span><br>                is = socket.getInputStream();<br><br>                <span class="hljs-comment">//管道流</span><br>                byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>                <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-keyword">int</span> len;<br>                <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    byteArrayOutputStream.write(buffer,<span class="hljs-number">0</span>,len);<br>                &#125;<br>                System.out.println(byteArrayOutputStream.toString());<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (byteArrayOutputStream!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    byteArrayOutputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (is!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    is.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (socket!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (serverSocket!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    serverSocket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson03;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建端口</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9000</span>);<br>        <span class="hljs-comment">//创建输出流</span><br>        OutputStream os = socket.getOutputStream();<br><br>        <span class="hljs-comment">//读取文件</span><br>         FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;123.jpg&quot;</span>));<br><br>        <span class="hljs-comment">//写出文件 让服务端接收</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        <span class="hljs-comment">//告诉服务端发送完毕</span><br>        socket.shutdownOutput();<span class="hljs-comment">//输出完毕</span><br><br>        <span class="hljs-comment">//接收完毕</span><br>        InputStream inputStream = socket.getInputStream();<br><br>        <span class="hljs-comment">//String byte[]</span><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        <span class="hljs-keyword">byte</span>[] buffer2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len2;<br><br>        <span class="hljs-keyword">while</span> ((len2 = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            baos.write(buffer,<span class="hljs-number">0</span>,len2);<br>        &#125;<br>        System.out.println(baos.toString());<br><br>        <span class="hljs-comment">//关闭资源</span><br>        baos.close();<br>        inputStream.close();<br>        fileInputStream.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson03;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//创建服务</span><br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9000</span>);<br><br>        <span class="hljs-comment">//监听器</span><br>        Socket socket = serverSocket.accept();<br><br>        <span class="hljs-comment">//获取输入流</span><br>        InputStream inputStream = socket.getInputStream();<br><br>        <span class="hljs-comment">//文件输出</span><br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;456.jpg&quot;</span>));<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read()) != -<span class="hljs-number">1</span>) &#123;<br>            fileOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        <span class="hljs-comment">//通知客户端我接收完毕</span><br>        OutputStream outputStream = socket.getOutputStream();<br>        outputStream.write(<span class="hljs-string">&quot;我接收完了，你可以断开了&quot;</span>.getBytes());<br><br><span class="hljs-comment">//        关闭资源</span><br>        outputStream.close();<br>        fileOutputStream.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><blockquote><p>不用连接 不稳定</p></blockquote><p>和TCP编程相比，UDP编程就简单得多，因为UDP没有创建连接，数据包也是一次收发一个，所以没有流的概念。</p><p>在Java中使用UDP编程，仍然需要使用Socket，因为应用程序在使用UDP时必须指定网络接口（IP）和端口号。注意：UDP端口和TCP端口虽然都使用0~65535，但他们是两套独立的端口，即一个应用程序用TCP占用了端口1234，不影响另一个应用程序用UDP占用端口1234。</p><p>服务器端：</p><p>在服务器端，使用UDP也需要监听指定的端口。Java提供了<code>DatagramSocket</code>来实现这个功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">6666</span>); <span class="hljs-comment">// 监听指定端口</span><br><span class="hljs-keyword">for</span> (;;) &#123; <span class="hljs-comment">// 无限循环</span><br>    <span class="hljs-comment">// 数据缓冲区:</span><br>    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>    DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(buffer, buffer.length);<br>    ds.receive(packet); <span class="hljs-comment">// 收取一个UDP数据包</span><br>    <span class="hljs-comment">// 收取到的数据存储在buffer中，由packet.getOffset(), packet.getLength()指定起始位置和长度</span><br>    <span class="hljs-comment">// 将其按UTF-8编码转换为String:</span><br>    String s = <span class="hljs-keyword">new</span> String(packet.getData(), packet.getOffset(), packet.getLength(), StandardCharsets.UTF_8);<br>    <span class="hljs-comment">// 发送数据:</span><br>    <span class="hljs-keyword">byte</span>[] data = <span class="hljs-string">&quot;ACK&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    packet.setData(data);<br>    ds.send(packet);<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器端首先使用如下语句在指定的端口监听UDP数据包：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DatagramSocket ds</span> = new DatagramSocket(6666);<br></code></pre></td></tr></table></figure><p>如果没有其他应用程序占据这个端口，那么监听成功，我们就使用一个无限循环来处理收到的UDP数据包：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for (<span class="hljs-comment">;;) &#123;</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>要接收一个UDP数据包，需要准备一个<code>byte[]</code>缓冲区，并通过<code>DatagramPacket</code>实现接收：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">byte</span>[] <span class="hljs-built_in">buffer</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(<span class="hljs-built_in">buffer</span>, <span class="hljs-built_in">buffer</span>.length);<br>ds.receive(packet);<br></code></pre></td></tr></table></figure><p>假设我们收取到的是一个<code>String</code>，那么，通过<code>DatagramPacket</code>返回的<code>packet.getOffset()</code>和<code>packet.getLength()</code>确定数据在缓冲区的起止位置：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String s = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">packet</span>.<span class="hljs-params">getData</span>()</span>, packet.get<span class="hljs-constructor">Offset()</span>, packet.get<span class="hljs-constructor">Length()</span>, StandardCharsets.UTF_8);<br></code></pre></td></tr></table></figure><p>当服务器收到一个DatagramPacket后，通常必须立刻回复一个或多个UDP包，因为客户端地址在DatagramPacket中，每次收到的DatagramPacket可能是不同的客户端，如果不回复，客户端就收不到任何UDP包。</p><p>发送UDP包也是通过<code>DatagramPacket</code>实现的，发送代码非常简单：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">byte</span>[] <span class="hljs-class"><span class="hljs-keyword">data</span> = ...</span><br><span class="hljs-title">packet</span>.setData(<span class="hljs-class"><span class="hljs-keyword">data</span>);</span><br><span class="hljs-title">ds</span>.send(packet);<br></code></pre></td></tr></table></figure><hr><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>和服务器端相比，客户端使用UDP时，只需要直接向服务器端发送UDP包，然后接收返回的UDP包：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">DatagramSocket ds = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket()</span>;<br>ds.set<span class="hljs-constructor">SoTimeout(1000)</span>;<br>ds.connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;localhost&quot;</span>)</span>, <span class="hljs-number">6666</span>); <span class="hljs-comment">// 连接指定服务器和端口</span><br><span class="hljs-comment">// 发送:</span><br>byte<span class="hljs-literal">[]</span> data = <span class="hljs-string">&quot;Hello&quot;</span>.get<span class="hljs-constructor">Bytes()</span>;<br>DatagramPacket packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">data</span>, <span class="hljs-params">data</span>.<span class="hljs-params">length</span>)</span>;<br>ds.send(packet);<br><span class="hljs-comment">// 接收:</span><br>byte<span class="hljs-literal">[]</span> buffer = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>packet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">buffer</span>, <span class="hljs-params">buffer</span>.<span class="hljs-params">length</span>)</span>;<br>ds.receive(packet);<br>String resp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">packet</span>.<span class="hljs-params">getData</span>()</span>, packet.get<span class="hljs-constructor">Offset()</span>, packet.get<span class="hljs-constructor">Length()</span>);<br>ds.disconnect<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>客户端打开一个<code>DatagramSocket</code>使用以下代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">DatagramSocket ds = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket()</span>;<br>ds.set<span class="hljs-constructor">SoTimeout(1000)</span>;<br>ds.connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;localhost&quot;</span>)</span>, <span class="hljs-number">6666</span>);<br></code></pre></td></tr></table></figure><p>客户端创建<code>DatagramSocket</code>实例时并不需要指定端口，而是由操作系统自动指定一个当前未使用的端口。紧接着，调用<code>setSoTimeout(1000)</code>设定超时1秒，意思是后续接收UDP包时，等待时间最多不会超过1秒，否则在没有收到UDP包时，客户端会无限等待下去。这一点和服务器端不一样，服务器端可以无限等待，因为它本来就被设计成长时间运行。</p><p>注意到客户端的<code>DatagramSocket</code>还调用了一个<code>connect()</code>方法“连接”到指定的服务器端。不是说UDP是无连接的协议吗？为啥这里需要<code>connect()</code>？</p><p>这个<code>connect()</code>方法不是真连接，它是为了在客户端的<code>DatagramSocket</code>实例中保存服务器端的IP和端口号，确保这个<code>DatagramSocket</code>实例只能往指定的地址和端口发送UDP包，不能往其他地址和端口发送。这么做不是UDP的限制，而是Java内置了安全检查。</p><p>如果客户端希望向两个不同的服务器发送UDP包，那么它必须创建两个<code>DatagramSocket</code>实例。</p><p>后续的收发数据和服务器端是一致的。通常来说，客户端必须先发UDP包，因为客户端不发UDP包，服务器端就根本不知道客户端的地址和端口号。</p><p>如果客户端认为通信结束，就可以调用<code>disconnect()</code>断开连接：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ds.disconnect()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>注意到<code>disconnect()</code>也不是真正地断开连接，它只是清除了客户端<code>DatagramSocket</code>实例记录的远程服务器地址和端口号，这样，<code>DatagramSocket</code>实例就可以连接另一个服务器端。</p><h4 id="小结0"><a href="#小结0" class="headerlink" title="小结0"></a>小结0</h4><p>使用UDP协议通信时，服务器和客户端双方无需建立连接：</p><ul><li>服务器端用<code>DatagramSocket(port)</code>监听端口；</li><li>客户端使用<code>DatagramSocket.connect()</code>指定远程地址和端口；</li><li>双方通过<code>receive()</code>和<code>send()</code>读写数据；</li><li><code>DatagramSocket</code>没有IO流接口，数据被直接写入<code>byte[]</code>缓冲区</li></ul><hr><p>发送端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson04;<br><br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-comment">//发送端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.建立一个socket</span><br>        DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket();<br><br>        <span class="hljs-comment">//建一个包</span><br>        String msg = <span class="hljs-string">&quot;你好服务端&quot;</span>;<br>            <span class="hljs-comment">//发送给谁</span><br>        InetAddress localhost = InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">9999</span>;<br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(msg.getBytes(),<span class="hljs-number">0</span>,msg.getBytes().length,localhost,port);<br><br>        <span class="hljs-comment">//发送包</span><br>        datagramSocket.send(packet);<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson04;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">//接收端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//开放端口</span><br>        DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);<br><br><br><br>        <span class="hljs-comment">//接收数据</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        DatagramPacket datagramPacket = <span class="hljs-keyword">new</span> DatagramPacket(buffer, <span class="hljs-number">0</span>, buffer.length);<br><br>        <span class="hljs-comment">//最终接收</span><br>        datagramSocket.receive(datagramPacket);<br>        System.out.println(datagramPacket.getAddress().getHostAddress());<br>        System.out.println(<span class="hljs-keyword">new</span> String(datagramPacket.getData()));<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环发送"><a href="#循环发送" class="headerlink" title="循环发送"></a>循环发送</h4><p>==发送==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat;<br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-comment">//发送</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sender</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//建立socket</span><br>        DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">//数据 控制台输入</span><br>        <span class="hljs-comment">//控制台输入</span><br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            String data = reader.readLine();<br>            <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br><br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>));<br>            <span class="hljs-comment">//发送包</span><br>            datagramSocket.send(packet);<br><br>            <span class="hljs-keyword">if</span> (data.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>==接收==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><span class="hljs-keyword">import</span> java.text.BreakIterator;<br><br><span class="hljs-comment">//接收</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receive</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//端口</span><br>        DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-comment">//接收数据</span><br><br>            <span class="hljs-keyword">byte</span>[] contains = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(contains, <span class="hljs-number">0</span>, contains.length);<br><br><br>            datagramSocket.receive(packet);<br>            <span class="hljs-keyword">byte</span>[] data = packet.getData();<br>            String recieiceDate = <span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, data.length);<br>            System.out.println(recieiceDate);<br><br>            <span class="hljs-keyword">if</span> (recieiceDate.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="多线程交流"><a href="#多线程交流" class="headerlink" title="多线程交流"></a>多线程交流</h4><p>TalkSend.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat02;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkSend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    DatagramSocket datagramSocket = <span class="hljs-keyword">null</span>;<br>    BufferedReader reader = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> MyPort;<br>    <span class="hljs-keyword">private</span> String MyAddress;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ToPort;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkSend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> myPort, String myAddress, <span class="hljs-keyword">int</span> toPort)</span> </span>&#123;<br>        MyPort = myPort;<br>        MyAddress = myAddress;<br>        ToPort = toPort;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//建立socket</span><br>            datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(MyPort);<br><br>            <span class="hljs-comment">//数据 控制台输入</span><br>            <span class="hljs-comment">//控制台输入</span><br>            reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String data = reader.readLine();<br>                <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br><br>                DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-keyword">this</span>.MyAddress, <span class="hljs-keyword">this</span>.ToPort));<br>                <span class="hljs-comment">//发送包</span><br>                datagramSocket.send(packet);<br><br>                <span class="hljs-keyword">if</span> (data.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TalkReceive.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat02;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkReceive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    DatagramSocket datagramSocket = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkReceive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">//端口</span><br>            datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket(port);<br>        &#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//接收数据</span><br><br>                <span class="hljs-keyword">byte</span>[] contains = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><br>                DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(contains, <span class="hljs-number">0</span>, contains.length);<br><br><br>                datagramSocket.receive(packet);<br>                <span class="hljs-keyword">byte</span>[] data = packet.getData();<br>                String recieiceDate = <span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, data.length);<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;:&quot;</span> +recieiceDate);<br><br>                <span class="hljs-keyword">if</span> (recieiceDate.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        datagramSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TalkStudent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkStudent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">6666</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>),<span class="hljs-string">&quot;学生&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReceive(<span class="hljs-number">9999</span>),<span class="hljs-string">&quot;老师&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TalkTeacher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.chat02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkTeacher</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">5555</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9999</span>),<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReceive(<span class="hljs-number">8888</span>),<span class="hljs-string">&quot;学生&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>==可以互相发信息==</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote><p>统一资源定义符：定位互联网上的某个资源</p><p>DNS域名解析</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">协议：<span class="hljs-regexp">//i</span>p地址：端口<span class="hljs-regexp">/项目名/</span>资源<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lesson05;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLDown</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//下载地址</span><br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;https://m801.music.126.net/20210416005842/26a440ddd8500c5f41152bd182be33b2/jdyyaac/obj/w5rDlsOJwrLDjj7CmsOj/8366666591/cac9/d94d/8948/e2b3eea69209862623657b08bb7d6d19.m4a&quot;</span>);<br><br>        <span class="hljs-comment">//连接这个资源 HTTP</span><br>        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();<br><br>        InputStream inputStream = urlConnection.getInputStream();<br><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;1.m4a&quot;</span>));<br><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            fos.write(buffer,<span class="hljs-number">0</span>,len);<br><br>        &#125;<br>        fos.close();<br>        inputStream.close();<br>        urlConnection.disconnect();<span class="hljs-comment">//断开连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常</title>
    <link href="/2021/04/12/%E5%BC%82%E5%B8%B8/"/>
    <url>/2021/04/12/%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><img src="D:\study\typora\截图\异常目录.png"></p><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><ul><li>异常指程序运行中出现的不期而遇的各种状况，如文件找不到，网络连接失败，非法参数</li><li>异常发生在程序运行期间，他影响了正常运行</li></ul><h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><ul><li>检测性异常</li><li>运行时异常</li><li>错误ERROR</li></ul><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><ul><li>java把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类</li><li>在java API中已经定义了许多异常类，这些异常类分为两大类，错误ERROR和异常Exception</li></ul><p><img src="D:\study\typora\截图\异常结构.png"></p><h3 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h3><ul><li>Error类对象有java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关</li><li>java虚拟机运行错误，当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError.这些异常发生时，Java虚拟机（JVm）一般会选择线程终止</li><li>还有发生在虚拟机试图执行应用时，如类定义错误，连接错误，这些错误是不可查的，绝大多是是不允许发生的</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p><img src="D:\study\typora\截图\Exception.png"></p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul><li><p>抛出异常</p></li><li><p>捕获异常</p></li><li><p>异常处理的五个关键字</p><ul><li>try</li><li>catch</li><li>finally</li><li>throw</li><li>throws</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><br>        <br><br>        <span class="hljs-comment">//finally可以不要，假设IO资源 就可以放在finally来关闭</span><br>        <br>        <br>        <span class="hljs-comment">//快捷键  Ctrl + Alt + T</span><br>    &#125;<br><br>    <span class="hljs-comment">//假设这个方法中，没办法处理这个异常，方法向上抛出异常</span><br>    <span class="hljs-comment">//用throws</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> <span class="hljs-keyword">throws</span> ArithmeticException</span>&#123;<br>        <span class="hljs-comment">//假设要去捕获多个异常，要从小到大</span><br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//监控区域</span><br>            <span class="hljs-comment">//System.out.println(a / b);</span><br><span class="hljs-comment">//            new Test().a();</span><br><br>            <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException();<span class="hljs-comment">//主动抛出异常  一般在方法中使用</span><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<span class="hljs-comment">//捕获异常</span><br>            <span class="hljs-comment">//System.out.println(&quot;程序出现异常，变量b不可以为0&quot;);</span><br><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//处理善后工作，一定会执行</span><br>            System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> </span>&#123;<br>        b();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">b</span><span class="hljs-params">()</span> </span>&#123;<br>        a();<br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p><img src="D:\study\typora\截图\自定义异常.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exception.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-comment">//传递数字》10</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> detail;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(<span class="hljs-keyword">int</span> detail)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.detail = detail;<br>    &#125;<br><br>    <span class="hljs-comment">//异常的打印信息：toString</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;detail=&quot;</span> + detail +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">package</span> com.exception.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;传递的参数为：&quot;</span>+a);<br>        <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(a);<span class="hljs-comment">//paochu</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test(<span class="hljs-number">11</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;MyException==&gt;&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="D:\study\typora\截图\经验总结.png"></p>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内部类</title>
    <link href="/2021/04/12/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2021/04/12/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2021/03/29 星期一</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是外部类的方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;这是内部类的方法&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//获得外部类的私有属性</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(id);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>Outer outer = <span class="hljs-keyword">new</span> Outer();<br>        <span class="hljs-comment">//通过这个外部类来实例化内部类</span><br>        Outer.Inner inner = outer.<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br>        inner.getId();<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p><img src="D:\study\typora\截图\内部类.png">   </p>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象类和接口</title>
    <link href="/2021/04/12/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <url>/2021/04/12/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2021 /03/29 星期一</p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><img src="D:\study\typora\截图\抽象类.png"></p><ul><li><p>```<br>//抽象类的所有方法，继承它的子类，必须实现它的所有方法，</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>- ```<br>  /抽象类 <span class="hljs-keyword">abstract</span> 类 <span class="hljs-keyword">extends</span> ：单继承   没有多继承<br>  <span class="hljs-comment">//但是  接口 可以多继承</span><br></code></pre></td></tr></table></figure></li><li><p>```<br>//1.不能new这个抽象类，只能靠子类去实现它；约束！<br>//2.抽象类里面可以写普通的方法<br>//3.抽象方法只能写在抽象类中<br>//抽象的抽象：约束</p><p>//思考题？<br>//抽象类不能new对象，抽象类还有构造器吗   **有构造器<br>//抽象类存在的意义    **提高开发效率，减少代码，提取共同方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>```java<br><span class="hljs-comment">//抽象类 abstract 类 extends ：单继承   没有多继承</span><br><span class="hljs-comment">//但是  接口 可以多继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>&#123;<br><br>    <span class="hljs-comment">//约束~有人帮我们实现</span><br>    <span class="hljs-comment">//astract 抽象方法，只有名字，没有方法的实现！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//1.不能new这个抽象类，只能靠子类去实现它；约束！</span><br>    <span class="hljs-comment">//2.抽象类里面可以写普通的方法</span><br>    <span class="hljs-comment">//3.抽象方法只能写在抽象类中</span><br>    <span class="hljs-comment">//抽象的抽象：约束</span><br><br>    <span class="hljs-comment">//思考题？</span><br>    <span class="hljs-comment">//抽象类不能new对象，抽象类还有构造器吗   **有构造器</span><br>    <span class="hljs-comment">//抽象类存在的意义    **提高开发效率，减少代码，提取共同方法，</span><br>&#125;<br><br><br><span class="hljs-comment">//抽象类的所有方法，继承它的子类，必须实现它的所有方法，（</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><img src="D:\study\typora\截图\接口.png"></p><ul><li><p>接口的本质是契约</p></li><li><p>```<br>接口作用：</p><pre><code>1.约束2.定义一些方法，让不同的人实现3.public abstract  方法4.public static final 常量5.接口不能被实例化，接口中没有构造方法6.implements 可以实现多个接口7.必须重写接口的所有方法</code></pre><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```<br>  <span class="hljs-regexp">//</span>抽象类是：extends<br>  <span class="hljs-regexp">//</span>类可以实现接口，implements 接口<br>  <span class="hljs-regexp">//</span>实现了接口了，就必须重写接口的所有方法<br>  <br>  <span class="hljs-regexp">//</span>多继承   ~利用接口实现多继承<br></code></pre></td></tr></table></figure></li><li><p>```<br>//接口中的所有定义的方法其实都是抽象的 public abstract<br>//接口都需有有一个实现类</p><p>//常量：接口里面定义的都是常量<br>//public static final</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TimeService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">time</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">//接口中的所有定义的方法其实都是抽象的 public abstract</span><br>    <span class="hljs-comment">//接口都需有有一个实现类</span><br><br>    <span class="hljs-comment">//常量：接口里面定义的都是常量</span><br>    <span class="hljs-comment">//public static final</span><br>    <span class="hljs-keyword">int</span> AGE = <span class="hljs-number">99</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String naem)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updata</span><span class="hljs-params">(String name)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><br><br><br><span class="hljs-comment">//抽象类是：extends</span><br><span class="hljs-comment">//类可以实现接口，implements 接口</span><br><span class="hljs-comment">//实现了接口了，就必须重写接口的所有方法</span><br><br><span class="hljs-comment">//多继承   ~利用接口实现多继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span>,<span class="hljs-title">TimeService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String naem)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updata</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">time</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象简单小结类和对象</title>
    <link href="/2021/04/12/%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/04/12/%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="简单小结类和对象"><a href="#简单小结类和对象" class="headerlink" title="简单小结类和对象"></a>简单小结类和对象</h2><blockquote><p>2021/03/23 星期二</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>类与对象<br>     类是一个模板 抽象的，对象是一个具体实例<br><span class="hljs-number">2.</span>方法<br>    定义、调用！<br><span class="hljs-number">3.</span>对象的引用<br>    引用类型        基本类型（<span class="hljs-number">8</span>个）<br>    对象是通过引用来操作的： 栈<span class="hljs-comment">-----&gt;堆</span><br><span class="hljs-number">4.</span>属性：字段field 成员变量<br>    默认初始化：<br>        数字：<span class="hljs-number">0</span>  <span class="hljs-number">0.0</span><br>        <span class="hljs-type">char</span>：u0000<br>        <span class="hljs-type">boolean</span>：<span class="hljs-keyword">false</span><br>        引用：<span class="hljs-keyword">null</span><br>    修饰符  属性类型  属性名 = 属性值;<br><span class="hljs-number">5.</span>对象的创建和使用：<br>    <span class="hljs-number">1.</span>必须使用<span class="hljs-built_in">new</span>关键字创建对象，构造器  Person 家旭 = <span class="hljs-built_in">new</span> Person();<br>    <span class="hljs-number">2.</span>对象的属性：家旭.name<br>    <span class="hljs-number">3.</span>对象的方法：家旭.sleep();<br><br><span class="hljs-number">6.</span>类：<br>    静态的属性   属性<br>    动态的行为   方法<br><br>    三大特性：封装、继承、多态<br></code></pre></td></tr></table></figure><h2 id="1、封装"><a href="#1、封装" class="headerlink" title="1、封装"></a>1、封装</h2><p><img src="D:\study\typora\截图\封装.png"></p><p><strong>高内聚低耦合</strong></p><ul><li>高内聚：类的内部数据操作细节自己完成，不允许外包部干涩</li><li>低耦合：仅暴露少量方法给外部使用</li></ul><h3 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h3><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护性增加了</li></ul><hr><h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><p><img src="D:\study\typora\截图\继承.png"></p><ul><li><strong>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</strong></li><li>子类是父类的拓展</li><li><strong>java只有单继承，没有多继承</strong></li><li>继承是类与类之间的一个关系，除此之外关系还有<strong>依赖、组合、聚合等</strong></li></ul><hr><p><strong>快捷键</strong></p><p>Ctrl + h  查看继承树</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">在java中，所有的类，都默认直接间接继承<span class="hljs-keyword">object</span><br>子类继承父类，就会继承父类的所有方法<br></code></pre></td></tr></table></figure><hr><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>this关键字：当前类的</p><p>super关键字：父类的  //不可以直接调用私有的属性方法</p><p>先调用父类的构造器，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>super注意点：</strong></p><ul><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ul><p><strong>VS this</strong></p><ul><li>代表对象不同<ul><li>this：本身调用者这个对象</li><li>super代表父类对象的引用</li></ul></li><li>前提<ul><li>this：没有继承也可以使用</li><li>super：只能在继承条件下才可以使用</li></ul></li><li>构造方法<ul><li>this()：本类的构造</li><li>super()：父类的构造</li></ul></li></ul><hr><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">重写：需要有继承关系，子类重写父类的方法！<br>    <span class="hljs-number">1.</span>方法名必须相同<br>    <span class="hljs-number">2.</span>参数列表列表必须相同<br>    <span class="hljs-number">3.</span>修饰符：范围可以扩大，但不能缩小     <span class="hljs-keyword">public</span>  <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">private</span><br>    <span class="hljs-number">4.</span>抛出的异常，范围可以被缩小但不能被扩大； classNotFountException---&gt;Exception(大)<br><br><br>重写：子类的方法必须和父类一致，但是方法提不同<br><br>为什么需要重写：<br>    <span class="hljs-number">1.</span>父类的功能子类不一定需要，或者不一定满足！<br>    ALt + Insert  ：<span class="hljs-keyword">override</span> 重写<br></code></pre></td></tr></table></figure><p>注意点：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>静态方法：方法的调用只和左边，定义的数据类型有关<br><span class="hljs-regexp">//</span>非静态方法：才可以重写，重写只能重写public<br><span class="hljs-regexp">//</span>重写只存在于父子继承中<br>静态的方法和非静态的方法区别很大<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写都是方法的重写，与属性无关</span><br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B==&gt;test()&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A===&gt;test()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//方法的调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//静态方法：方法的调用只和左边，定义的数据类型有关</span><br>        <span class="hljs-comment">//非静态方法：才可以重写，重写只能重写public</span><br>        <span class="hljs-comment">//重写只存在于父子继承中</span><br>        A a = <span class="hljs-keyword">new</span> A();<br>        a.test();<br>        <span class="hljs-comment">//父类的引用指向了子类</span><br>        B b = <span class="hljs-keyword">new</span> A();<br>        b.test();<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>上面两个方法都是静态方法</strong></p><p><img src="D:\study\typora\截图\静态方法重写.png"></p><hr><ul><li>结果b还是调用了父类的方法</li><li>所以说：静态方法：方法的调用只和左边，定义的数据类型有关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写都是方法的重写，与属性无关</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B==&gt;test()&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A===&gt;test()&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//方法的调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//静态方法：方法的调用只和左边，定义的数据类型有关</span><br>        <span class="hljs-comment">//非静态方法：才可以重写，重写只能重写public</span><br>        <span class="hljs-comment">//重写只存在于父子继承中</span><br>        A a = <span class="hljs-keyword">new</span> A();<br>        a.test();<br>        <span class="hljs-comment">//父类的引用指向了子类</span><br>        B b = <span class="hljs-keyword">new</span> A();<br>        b.test();<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>将上述两个方法改为非静态方法</strong></p><p><img src="D:\study\typora\截图\非静态方法.png"></p><hr><ul><li>发现输出和上面不一样了</li><li>这就说明 静态的方法属于类，非静态的方法属于对象</li><li>子类重写了方法和非静态方法有关，和静态方法关系不大</li><li>子类重写父类的方法不能是private，否则不算是重写</li></ul><p><strong>重写都是方法的重写，与属性无关</strong></p><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><img src="D:\study\typora\截图\多态.png"></p><p>多态是方法的多态，属性没有多态    </p><ul><li>当父类new一个子类对象时<ul><li>调用自己的有而子类没有的方法 是    可以的</li><li>子类重写了父类的方法，优先执行子类的方法</li><li>子类有，而父类没有，则只能进行类型转换，否则无法调用<ul><li>即Student 能调用的方法都是自己的或者继承父类的</li><li>Person是父类型，可以指向子类，但是不能调用子类独有的方法</li></ul></li><li>对象能执行什么方法，主要看对象左边的类型，和右边关系不大</li></ul></li></ul><hr><p><strong>多态的注意事项</strong></p><ul><li>多态是方法的多态，属性没有多态</li><li>父类和子类，有联系，类型转换异常！ ClassCastExcetion!</li><li>在运行中才可以确定的</li><li>存在条件：<ul><li>继承条件</li><li>方法需要重写</li><li>父类引用指向子类对象    Father father = new Son();<ul><li>方法不可以重写：<ul><li>static方法：属于类，不属于实例</li><li>final 常量</li><li>private 私有的</li></ul></li></ul></li></ul></li></ul><hr><h4 id="instance-of"><a href="#instance-of" class="headerlink" title="instance of"></a>instance of</h4><ul><li>instanceof  判断两个类是否存在父子关系，是则true，否这false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//object&gt;string</span><br>        <span class="hljs-comment">//object&gt;person&gt;teacher</span><br>        <span class="hljs-comment">//object&gt;person&gt;student</span><br>        <span class="hljs-comment">//</span><br>        Object object = <span class="hljs-keyword">new</span> Student();<br><br>        <span class="hljs-comment">//instanceof  判断两个类是否存在父子关系，是则true，否这false</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Teacher);<span class="hljs-comment">//false</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> String);<span class="hljs-comment">//false</span><br><br>        Person person = <span class="hljs-keyword">new</span> Student();<br><br>        <span class="hljs-comment">//instanceof  判断两个类是否存在父子关系，是则true，否这false</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Teacher);<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//System.out.println(person instanceof String);//编译报错！</span><br><br>        Student student = <span class="hljs-keyword">new</span> Student();<br><br>        <span class="hljs-comment">//instanceof  判断两个类是否存在父子关系，是则true，否这false</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">//true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//System.out.println(student instanceof Teacher);//编译报错</span><br>        <span class="hljs-comment">//System.out.println(person instanceof String);//编译报错！</span><br><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">X <span class="hljs-keyword">instanceof</span> Y 能不能编译通过，看是否有继承关系<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//类型之间的转化： 父        子</span><br>        <span class="hljs-comment">//高    低</span><br>        Person obj = <span class="hljs-keyword">new</span> Student();<br><br>        <span class="hljs-comment">//student这个对象转换为Student类型，我们就可以使用Student的方法了</span><br><br><span class="hljs-comment">//        Student student = (Student) obj;</span><br>        ((Student) obj).go();<br><br>        <span class="hljs-comment">//子类转换为父类，可能丢失本来自己的一些方法</span><br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        Person person = student;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>父类引用指向子类的对象</li><li>把子类转换为父类，向上转型</li><li>把父类转换为子类，向下转型，强制转换</li><li>方便方法的调用，减少重复的代码！简洁</li></ul><p>抽象：封装，继承，多态！</p><p>抽象类，接口</p><hr><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><p>private static int age；</p><p>private double score；</p><p>//age 是静态变量</p><p>// score不是静态变量</p><p>所以</p><p>age可以用类直接调用如：Student.age</p><p>score只能用new出来的对象来调用：student.score</p><p>静态方法可以直接调用，</p><p>非静态方法得需用new出来的对象来调用</p><p>非静态方法可以直接调用静态方法</p><p>静态方法不可以直接调用非静态 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    &#123;<br>        <span class="hljs-comment">//匿名代码块</span><br>        System.out.println(<span class="hljs-string">&quot;匿名代码块);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    static &#123;</span><br><span class="hljs-string">        //静态代码块</span><br><span class="hljs-string">        //永久只执行一次</span><br><span class="hljs-string">        System.out.println(&quot;</span>静态代码块<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    public Person()&#123;</span><br><span class="hljs-string">        System.out.println(&quot;</span>构造方法<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public static void main(String[] args) &#123;</span><br><span class="hljs-string">        Person person = new Person();</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">                           </span><br><span class="hljs-string">                           </span><br><span class="hljs-string">                           //静态导入包</span><br><span class="hljs-string">import static java.lang.Math.random;</span><br><span class="hljs-string"></span><br><span class="hljs-string">public class Test &#123;</span><br><span class="hljs-string">    public static void main(String[] args) &#123;</span><br><span class="hljs-string">        System.out.println(random());</span><br><span class="hljs-string">        //如果不加static，则本来的写法是</span><br><span class="hljs-string">        System.out.println(Math.random());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><hr><p><strong>如果被final修饰了 就不能被继承了</strong></p>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2021/04/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/04/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><blockquote><p>java的核心思想就是OOP（面向对象编程的缩写）</p></blockquote><h3 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h3><p><img src="D:\study\typora\截图\面向对象目录.png"></p><h3 id="2-面向过程和面向对象"><a href="#2-面向过程和面向对象" class="headerlink" title="2.面向过程和面向对象"></a>2.面向过程和面向对象</h3><ul><li><p>面向过程思想（线性思维）</p><ul><li>步骤清晰简单，第一步做什么，第二部做什么…</li><li>面对过程适合处理一些较为简单的问题</li></ul></li><li><p>面向对象思想</p><ul><li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，对某些分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul></li><li><p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用<em>面对对象</em>的思路来分析整个系统。但是具体到微观操作，仍然需要<em>面向过程</em>的思路去处理。</strong></p></li></ul><hr><h3 id="3-什么是面向对象"><a href="#3-什么是面向对象" class="headerlink" title="3.什么是面向对象"></a>3.什么是面向对象</h3><ul><li>面向对象编程（object-Oriented Programming，OOP）</li><li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的组织（封装）数据</strong></li><li><strong>抽象</strong></li><li>三大特性<ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul></li><li>从认识论角度考虑是先有对象后有类。<strong>对象，是具体的事物。 类是抽象的，是对对象的抽象</strong></li><li>从代码运行角度考虑是先有类后有对象。<strong>类是对象的模板。</strong></li></ul><hr><h3 id="4-回顾方法及加深"><a href="#4-回顾方法及加深" class="headerlink" title="4.回顾方法及加深"></a>4.回顾方法及加深</h3><p><img src="D:\study\typora\截图\回顾.png"></p><ul><li>break：跳出switch，循环等</li><li>return：代表方法的结束，返回一个结果，结果可为空也可以为其他类型</li><li>方法名：注意规范（驼峰原则），见名知意</li><li>参数列表：（参数类型，参数名……）</li><li>异常抛出（后面再说）</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe">静态方法也就是 <span class="hljs-keyword">static</span> 方法是和类一起加载的，很早很早就存在了<br>非静态方法就是在类实例化之后才存在的，也就是在<span class="hljs-keyword">new</span><span class="hljs-type"></span>之后才算数的<br>所以静态方法里面无法调用非静态方法<br>就是存在的东西不能去调用不存在的东西<br>但是<span class="hljs-keyword">static</span>静态方法可以调用静态方法<br>非静态也可以调用非静态的方法<br>非静态也可以调用静态方法，因为当非静态方法可以调用时，静态方法早就存在了<br>所以存在可以调用存在，所以可以调用<span class="hljs-keyword">static</span>方法<br></code></pre></td></tr></table></figure><ul><li>形参和实参：形式参数和实际参数</li><li>add（1,2）1,2是形式参数</li><li>public int add（int i，int j），i 和 j 都是形式参数</li></ul><p><strong>java是值传递</strong></p><ul><li>值传递和引用传递<ul><li>值传递：</li><li>引用传递：</li></ul></li></ul><hr><h3 id="5、类和对象的关系"><a href="#5、类和对象的关系" class="headerlink" title="5、类和对象的关系"></a>5、类和对象的关系</h3><ul><li>类是一种抽象的数据类型，它是对某一类事物的整体描述/定义，但是并不能代表某一个具体的事物<ul><li>动物、植物、手机、电脑…</li><li>person类、pet类、car类 ，这些类都是用来描述具体的事物应该具备的特点和行为</li></ul></li><li>对象是抽象概念的具体实例<ul><li>比如：张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例</li><li>能够体现出特点，展现出功能的是具体实例，而不是一个抽象的概念。</li></ul></li></ul><hr><h3 id="6、创建和初始化对象"><a href="#6、创建和初始化对象" class="headerlink" title="6、创建和初始化对象"></a>6、创建和初始化对象</h3><ul><li>使用new关键字创建对象</li><li>使用new关键字创建的时候，除了<strong>分配内存空间</strong>之外，还会给创建好的对象，进行<strong>默认的初始化</strong>以及<strong>对类中构造器的调用</strong>。</li></ul><ul><li><strong>类中的构造器也称为构造方法</strong>，是在进行创建对象的时候必须调用的，并且构造器有以下两个特点：<ul><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ul></li><li><strong>构造器必须掌握</strong></li></ul><h3 id="7、构造类详解"><a href="#7、构造类详解" class="headerlink" title="7、构造类详解"></a>7、构造类详解</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//new 实例化了一个对象</span><br>Person person = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>();<br><span class="hljs-comment">//new一个有参对象</span><br>Person person1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;jiaxu&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>构造器</strong></p><ol><li>和类名相同</li><li>没有返回值</li></ol><p><strong>作用：</strong></p><ol><li>new 本质就是在调用构造方法</li><li>初始化对象的值</li></ol><p><strong>注意点：</strong></p><ol><li>定义有参构造之后，如果想继续使用无参构造，显示的定义一个无参的构造函数</li></ol><p><strong>快捷键</strong></p><p>alt + insert ： 直接生成构造函数，get、set方法等</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demoo2;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>:2021/3/23 - 20:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-comment">//一个类即使什么都没有写，它也会有一个方法</span><br>    <span class="hljs-comment">//显示的定义构造器</span><br><br>    String name;<br><br>    <span class="hljs-comment">//实例化初始值</span><br>    <span class="hljs-comment">//1.使用new关键字，本质就是调用构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br><br>    <span class="hljs-comment">//有参构造：一旦定义了有参构造，无参就必须显示定义</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//alt+insert</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="7-创建对象的内存分析"><a href="#7-创建对象的内存分析" class="headerlink" title="7.创建对象的内存分析"></a>7.创建对象的内存分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Pet dog = <span class="hljs-keyword">new</span> Pet();<br>        dog.name = <span class="hljs-string">&quot;旺财&quot;</span>;<br>        dog.age = <span class="hljs-number">3</span>;<br>        dog.shout();<br>        System.out.println(dog.name);<br>        System.out.println(dog.age);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;叫了一声&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Pet dog = <span class="hljs-keyword">new</span> Pet();<br></code></pre></td></tr></table></figure><p><strong>内存情况</strong></p><p><img src="D:\study\typora\截图\new内存.png"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dog.name</span> = <span class="hljs-string">&quot;旺财&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attr">dog.age</span> = <span class="hljs-number">3</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>内存状况</strong></p><p><img src="D:\study\typora\截图\赋值.png"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Pet cat</span> = new Pet();<br></code></pre></td></tr></table></figure><p><img src="D:\study\typora\截图\内存最终.png"></p><p><strong>堆栈情况</strong></p><p><img src="D:\study\typora\截图\内存情况.png"></p>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2021/04/12/%E6%95%B0%E7%BB%84/"/>
    <url>/2021/04/12/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>2021/03/15 星期一</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><img src="D:\study\typora\截图\目录.png"></p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p><img src="D:\study\typora\截图\数组定义.png"></p><ul><li><p>数组是相同类型的数据的有序集合</p></li><li><p>数组描述的是相同类型的若干个数据，按照一定的先后次序排序组合而成</p></li><li><p>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们</p></li><li><p>数组的下标是从0开始的</p></li></ul><hr><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><p><img src="D:\study\typora\截图\数组的创建.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.array;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>:2021/3/17 - 20:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo01</span> </span>&#123;<br>    <span class="hljs-comment">//变量类型     变量名字     =  变量的值；</span><br>    <span class="hljs-comment">//数组类型</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums;<span class="hljs-comment">//定义   常用  声明了一个数组</span><br>        <span class="hljs-keyword">int</span> nums2[]; <span class="hljs-comment">//这是早些年为了c++程序员转到java而是用的写法，一般不用</span><br><br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//这里面可以存放10个int类型的数字  创建了一个数组</span><br><br>        <span class="hljs-comment">//给数组元素赋值</span><br>        nums[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        nums[<span class="hljs-number">1</span>]=<span class="hljs-number">7</span>;<br>        nums[<span class="hljs-number">2</span>]=<span class="hljs-number">6</span>;<br>        nums[<span class="hljs-number">3</span>]=<span class="hljs-number">5</span>;<br>        nums[<span class="hljs-number">4</span>]=<span class="hljs-number">4</span>;<br>        nums[<span class="hljs-number">5</span>]=<span class="hljs-number">3</span>;<br>        nums[<span class="hljs-number">6</span>]=<span class="hljs-number">2</span>;<br>        nums[<span class="hljs-number">7</span>]=<span class="hljs-number">1</span>;<br>        nums[<span class="hljs-number">8</span>]=<span class="hljs-number">1</span>;<br>        nums[<span class="hljs-number">9</span>]=<span class="hljs-number">1</span>;<br><br>        System.out.println(nums.length);<br>        System.out.println(nums[<span class="hljs-number">9</span>]);<span class="hljs-comment">//int 数组的默认值是0</span><br><br>        <span class="hljs-comment">//计算所有元素的和</span><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        System.out.println(sum);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="D:\study\typora\截图\内存.png"></p><p><img src="D:\study\typora\截图\内存状况.png"></p><p><strong>java内存</strong></p><ol><li>堆：<ul><li>存放new的对象和数组</li><li>可以被所有线程共享，不会存放别的对象引用</li></ul></li><li>栈<ul><li>存放基本变量类型（会包括这个类型的具体数值）</li><li>引用对象的变量（会存放这个引用在堆里的具体地址）</li></ul></li><li>方法区<ul><li>可以被所有线程共享</li><li>包括了所有的class和static变量</li></ul></li></ol><hr><p><strong>数组越界提示词</strong></p><p><strong>java.lang.ArrayIndexOutOfBoundsException</strong></p><hr><h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><img src="D:\study\typora\截图\数组初始化.png" style="zoom:80%;" /><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul><li>其长度是确定的，数组一旦被创建，它的大小就是不可以改变的</li><li>其元素必须是相同类型，不允许出现混合类型</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li><li>数组变量是引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量</li></ul><p>数组本身就是对象，java中对象也是在堆中，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中</strong></p><hr><h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><ul><li>下标的合法区间：[0, length-1],如果越界就会报错：</li></ul><p><img src="D:\study\typora\截图\报错.png"></p><hr><p><strong>小结</strong></p><ul><li>数组是相同数据类型（数据类型可以是任何类型）的有序集合</li><li>数组也是对象。数组元素相当于对象的成员变量</li><li>数组的长度是确定的，不可变得，如果越界，则报错</li><li>ArrayIndexOUTofBounds</li></ul>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java方法详解</title>
    <link href="/2021/04/12/java%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/04/12/java%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="java方法详解"><a href="#java方法详解" class="headerlink" title="java方法详解"></a>java方法详解</h2><blockquote><p>2021/03/15 星期一</p></blockquote><p><img src="D:\study\typora\截图\方法目录.png"></p><p><strong>java方法是语句的集合，它们扎起一起执行一个功能</strong></p><ul><li>方法是解决一类问题的步骤的有序集合</li><li>方法包含于类或者对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><hr><p>设计方法原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性</strong>，<em><strong>就是一个方法只完成一个功能，这样利于我们后期的拓展</strong></em></p><hr><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p><img src="D:\study\typora\截图\定义.png"></p><hr><h3 id="方法的构成"><a href="#方法的构成" class="headerlink" title="方法的构成"></a>方法的构成</h3><p><strong>方法包含一个方法头和一个方法体</strong></p><p>构成：</p><p><img src="D:\study\typora\截图\方法构成.png" alt="方法构成"></p><p>修饰符：(还有很多)</p><p><img src="D:\study\typora\截图\修饰符.png" alt="修饰符"></p><blockquote><p>接口里的方法默认情况下的访问权限为public</p></blockquote><blockquote><p><strong>修饰符不仅仅只有访问控制修饰符，其他的在后面再学习</strong></p></blockquote><p><strong>函数的结构   如图</strong></p><p><img src="D:\study\typora\截图\结构图.png"></p><hr><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li><p>调用方法：对象名.方法名(实参列表)</p></li><li><p>java支持两种调用方法的方式：根据方法是否返回值来选择</p><ul><li><p>当方法返回一个值得时候，方法调用通常被当做一个值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> larger = max(<span class="hljs-number">10</span>,<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure></li><li><p>当方法返回值是void，方法调用一定是一条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world!!&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><p><strong>一、值传递</strong></p><blockquote><p><em><strong>java都是值传递</strong></em></p></blockquote><p>**值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将  <em>不会影响到实际参数</em>  **</p><hr><p><strong>二、引用传递</strong></p><p><strong>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将  <em>影响到实际参数。</em></strong></p><p><img src="D:\study\typora\截图\值传递与引用传递的区别.png"></p><p><img src="D:\study\typora\截图\比喻.png" alt="比喻"></p><p><img src="D:\study\typora\截图\java值传递.png"></p><hr><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><blockquote><p>定义：重载就是在一个类中，有相同的函数名称，但是形参不同的函数</p></blockquote><p><strong>方法重载的规则</strong></p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数不同、或者类型不同、或者参数排列不同等）。</li><li>方法的放回类型可以相同也可以不同</li><li>仅仅返回类型不同不足以成为方法的重载</li></ul><p><strong>实现理论：</strong></p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul><hr><h3 id="命令行传参（了解即可）"><a href="#命令行传参（了解即可）" class="headerlink" title="命令行传参（了解即可）"></a>命令行传参（了解即可）</h3><p><img src="D:\study\typora\截图\命令行传参.png"></p><hr><h3 id="可变参数（了解就好了）"><a href="#可变参数（了解就好了）" class="headerlink" title="可变参数（了解就好了）"></a>可变参数（了解就好了）</h3><p><img src="D:\study\typora\截图\可变参数.png"></p><blockquote><p>注意：</p><ul><li>一个方法中只能指定一个可变参数</li><li>必须是最后一个参数</li></ul></blockquote><hr><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><img src="D:\study\typora\截图\递归.png"></p><blockquote><p>注意：</p><ul><li>递归就是最近调用自己</li></ul><p>递归结构包括两个部分：</p><ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法</li></ul><p>故我们需要：</p><ul><li>确认边界条件：</li></ul><p><strong>小次数可以用递归，多次数就不要用递归了</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scanner</title>
    <link href="/2021/04/12/Scanner/"/>
    <url>/2021/04/12/Scanner/</url>
    
    <content type="html"><![CDATA[<h2 id="浅谈scanner"><a href="#浅谈scanner" class="headerlink" title="浅谈scanner"></a>浅谈scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个扫描器对象，用于接收键盘数据</span><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br></code></pre></td></tr></table></figure><p>创建scanner对象，便于用户输入数据，提高交互</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//凡是属于IO流的类如果不关闭就会一直占用资源，要养成好习惯用完就关掉</span><br><br>scanner.close();<br></code></pre></td></tr></table></figure><p>用完就关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//scanner的相关函数</span><br>scanner.next();<span class="hljs-comment">//获取下一个字符</span><br>scanner.nextLine();<span class="hljs-comment">//获取下一行</span><br>scanner.nextInt();<span class="hljs-comment">//获取下一个整数</span><br>scanner.next数据类型();<span class="hljs-comment">//对于每个数据类型，scanner都有相对应的next去获取你输入的数据</span><br><br><span class="hljs-comment">//下面这几个hasNext**函数都是返回boolean类型，用于判断还有没有下一个</span><br>scanner.hasNext();<br>scanner.hasNextLine();<span class="hljs-comment">//判断还有没有下一行</span><br>scanner.hasNext数据类型();<span class="hljs-comment">//判断还有没有下一个这个类型的数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包机制和文档注释</title>
    <link href="/2021/04/12/%E5%8C%85%E6%9C%BA%E5%88%B6%E5%92%8C%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/"/>
    <url>/2021/04/12/%E5%8C%85%E6%9C%BA%E5%88%B6%E5%92%8C%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="包机制和文档注释"><a href="#包机制和文档注释" class="headerlink" title="包机制和文档注释"></a>包机制和文档注释</h2><blockquote><p>2021/03/15 星期一</p></blockquote><h3 id="一、包机制"><a href="#一、包机制" class="headerlink" title="一、包机制"></a>一、包机制</h3><p><strong>类似文件夹：可以在不同文件夹中放置相同命名的类型文件</strong></p><p><img src="D:\study\typora\截图\包机制.png"></p><p><strong>一般用域名倒置作为包名</strong></p><p><strong>在java中导包</strong></p><img src="D:\study\typora\截图\导包.png" alt="导包" style="zoom:150%;" /><hr><h3 id="二、javadoc（文档注释）"><a href="#二、javadoc（文档注释）" class="headerlink" title="二、javadoc（文档注释）"></a>二、javadoc（文档注释）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在java中的文档注释</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"><span class="hljs-doctag">@author</span>:wujiaxu</span><br><span class="hljs-comment"><span class="hljs-doctag">@version</span> 1.8</span><br><span class="hljs-comment"><span class="hljs-doctag">@since</span> 指明最低版本1.8</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> 参数</span><br><span class="hljs-comment"><span class="hljs-doctag">@return</span> 返回值情况</span><br><span class="hljs-comment"><span class="hljs-doctag">@throws</span> 异常抛出情况</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>在命令行中使用javadoc 文件名.java 即可生成注释文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#生成注释文档</span><br>javadoc -encoding UTF-8 -charset UTF-8 doc.java<br><span class="hljs-comment">#格式：javadoc 参数 文件名.java</span><br></code></pre></td></tr></table></figure><hr><p><strong>在idea中生成注释文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Tools-----&gt;Generate javaDoc---&gt;出现下面的界面-----&gt;第一个是整个项目  第二个是当前这位类</span><br><span class="hljs-comment">#----&gt;选择output directory（doc输出的地方）</span><br></code></pre></td></tr></table></figure><img src="D:\study\typora\截图\IDEAjavadoc.png" style="zoom:60%;" />]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关idea</title>
    <link href="/2021/04/12/%E6%9C%89%E5%85%B3idea/"/>
    <url>/2021/04/12/%E6%9C%89%E5%85%B3idea/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2021/03/08 星期一</p></blockquote><h1 id="关于idea"><a href="#关于idea" class="headerlink" title="关于idea"></a>关于idea</h1><h2 id="一、idea的快捷键"><a href="#一、idea的快捷键" class="headerlink" title="一、idea的快捷键"></a>一、idea的快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">alt + enter <span class="hljs-comment">#万能纠错/生成返回值变量</span><br><span class="hljs-built_in">shift</span> + enter <span class="hljs-comment">#换行</span><br>ctrl + <span class="hljs-built_in">shift</span> + enter <span class="hljs-comment">#自动</span><br>alt + down <span class="hljs-comment">#向下换行 其他同理</span><br>ctrl + 选择的函数左键 <span class="hljs-comment">#查看源代码</span><br>ctrl + y <span class="hljs-comment">#删除光标所在行</span><br>ctrl + alt + / <span class="hljs-comment">#提示方法参数类型</span><br>Ctrl + <span class="hljs-built_in">shift</span> + / <span class="hljs-comment">#代码块注释</span><br>ctrl + <span class="hljs-built_in">shift</span> + u <span class="hljs-comment">#变化大小写</span><br>ctrl + <span class="hljs-built_in">shift</span> + space <span class="hljs-comment">#智能代码提示</span><br>ctrl + <span class="hljs-built_in">shift</span> + R <span class="hljs-comment">#根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</span><br>ctrl + <span class="hljs-built_in">shift</span> + F <span class="hljs-comment">#查找整个项目或者指定目录的文件</span><br>ctrl + D <span class="hljs-comment"># 复制当前行到下一行</span><br></code></pre></td></tr></table></figure><h2 id="二、模板"><a href="#二、模板" class="headerlink" title="二、模板"></a>二、模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建主函数</span><br>psvm  / main<br><br><span class="hljs-comment">#输出</span><br>sout<br>soutv<br>soutm<br>soutp<br>xxx.sout<br><br><span class="hljs-comment">#for循环</span><br>fori<br>变形：iter加强<span class="hljs-keyword">for</span>循环<br>变形：itar普通<span class="hljs-keyword">for</span>循环<br><span class="hljs-comment">#集合list的for循环</span><br>list.for<br>list.fori<br>list.forr<span class="hljs-comment">#倒序循环</span><br><br><span class="hljs-comment">#ifn</span><br><span class="hljs-keyword">if</span>(list == null)<br>变形：inn 不等于null<br> xxx.nn<br>变形：xxx.null <br><br><br><span class="hljs-comment">#prsf等</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量和运算符</title>
    <link href="/2021/04/12/%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/04/12/%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="变量和运算符"><a href="#变量和运算符" class="headerlink" title="变量和运算符"></a>变量和运算符</h1><blockquote><p>2021/03/10 星期三</p></blockquote><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><p>定义：可以变化的量</p><p>**java变量是程序中最基础的存储单元，其要素包括变量名，变量类型 和  <em>作用域</em> **</p><hr><p><strong>变量名的命名原则</strong></p><p><img src="D:\study\typora\截图\变量命名原则.png" alt="图片"></p><p><strong>变量的类型</strong></p><ol><li>局部变量</li><li>类变量</li><li>全局变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> base;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/9 - 20:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07</span> </span>&#123;<br><br>    <span class="hljs-comment">//类变量static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> salary = <span class="hljs-number">2500</span>;<br><br><br>    <span class="hljs-comment">//属性：变量</span><br><br>    <span class="hljs-comment">//实例变量：从属于对象; 如果不初始化，自动赋值为0或者0.0</span><br>    <span class="hljs-comment">//布尔值：默认为false</span><br>    <span class="hljs-comment">//除了基本类型，其余的默认值都为null</span><br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br><br><br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//局部变量：必须声明和初始化值</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-comment">//变量类型  变量名字 = new base.Demo07</span><br>        Demo07 demo07 = <span class="hljs-keyword">new</span> Demo07();<br>        System.out.println(<span class="hljs-string">&quot;demo07.age = &quot;</span> + demo07.age);<br>        System.out.println(<span class="hljs-string">&quot;demo07.name = &quot;</span> + demo07.name);<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>        <span class="hljs-comment">//类变量 static</span><br>        System.out.println(<span class="hljs-string">&quot;salary = &quot;</span> + salary);<br>    &#125;<br><br>    <span class="hljs-comment">//其他方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修饰符是不存在先后顺序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修饰符不存在先后顺序</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-comment">//static final double PI = 3.14;  和上面是相等的</span><br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="二、常量"><a href="#二、常量" class="headerlink" title="二、常量"></a>二、常量</h2><blockquote><p>定义：初始化之后，就不再改变值！不会变动的值</p><p>用关键字<strong>final</strong>修饰</p><p>常量名一般大写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><blockquote><p>运算符类别</p><ol><li>算数运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符（了解即可）</li><li>条件运算符</li><li>扩展运算符</li></ol></blockquote><p><strong>运算符</strong></p><p><img src="D:\study\typora\截图\运算符.png" alt="运算符"></p><p><strong>一旦有高等级</strong>（例如 long，double），计算出来的结果也是 <strong>对应的高等级</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java注释和标识符和数据类型</title>
    <link href="/2021/04/12/java%E6%B3%A8%E9%87%8A%E5%92%8C%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/04/12/java%E6%B3%A8%E9%87%8A%E5%92%8C%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="java注释、标识符和数据类型"><a href="#java注释、标识符和数据类型" class="headerlink" title="java注释、标识符和数据类型"></a>java注释、标识符和数据类型</h1><h2 id="java注释"><a href="#java注释" class="headerlink" title="java注释"></a>java注释</h2><blockquote><p>2021/03/09  星期二</p></blockquote><p><strong>注释类型</strong></p><ol><li>单行注释</li><li>多行注释</li><li>文档注释（javadoc）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">//这是单行注释</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这是多行注释</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    <span class="hljs-doctag">@author</span>:吴家旭</span><br><span class="hljs-comment">    这是文档注释</span><br><span class="hljs-comment">    里面<span class="hljs-doctag">@author</span>等描述是可以被系统识别的</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="java的数据类型"><a href="#java的数据类型" class="headerlink" title="java的数据类型"></a>java的数据类型</h2><blockquote><p>java 是一种强类型的语言   </p><p>要求变量的使用严格符合规定 </p><p>需要先定义后使用</p></blockquote><h3 id="两大类"><a href="#两大类" class="headerlink" title="两大类"></a>两大类</h3><h4 id="一、基本类型-primitive-type"><a href="#一、基本类型-primitive-type" class="headerlink" title="一、基本类型 primitive type"></a>一、基本类型 primitive type</h4><ol><li>数值类型<ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li></ul></li><li>boolean类型<ul><li>true</li><li>false</li></ul></li></ol><hr><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><p>​        <em><strong>整数类型</strong></em></p><ul><li>byte</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">byte占一个字节范围：-128-127<br></code></pre></td></tr></table></figure><ul><li>short </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">占两个字节 范围：-32768 - 32767<br></code></pre></td></tr></table></figure><ul><li>int</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">int 占四个字节<br></code></pre></td></tr></table></figure><ul><li><p>long</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">占八个字节<br></code></pre></td></tr></table></figure><p><em><strong>浮点类型</strong></em></p></li><li><p>float</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#占四个字节</span><br></code></pre></td></tr></table></figure><ul><li>double</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#占八个字节</span><br></code></pre></td></tr></table></figure><p>​    <em><strong>字符类型</strong></em></p><ul><li>char</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#占八个字节</span><br></code></pre></td></tr></table></figure><hr><h5 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h5><p>​    <em><strong>boolean</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#只有true 和false</span><br><span class="hljs-comment">#而且只占一位</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>拓展知识：</p><p>位（bit）：计算机数据储存的最小单位</p><p>字节（byte）：1B（字节） = 8bit（位）；计算机数据处理的基本单位，习惯用大写                            B</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> base;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/9 - 9:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 整数拓展：</span><br><span class="hljs-comment">        * 进制   二进制0b   十进制    八进制0      十六进制0x</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> i2 = <span class="hljs-number">010</span>;<br>        <span class="hljs-keyword">int</span> i3 = <span class="hljs-number">0x10</span>;<br>        System.out.println(i);<br>        System.out.println(i2);<br>        System.out.println(i3);<br>        System.out.println(<span class="hljs-string">&quot;====================&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 浮点数拓展：</span><br><span class="hljs-comment">        * 银行业务怎么表示？钱</span><br><span class="hljs-comment">        * 用BigDecimal 数学工具类</span><br><span class="hljs-comment">        * float      有限 离散 舍入误差 大约 接近但不等于</span><br><span class="hljs-comment">        * double</span><br><span class="hljs-comment">        * */</span><br><br>        <span class="hljs-comment">//最好完全不要使用浮点数进行比较</span><br>        <span class="hljs-comment">//最好完全不要使用浮点数进行比较</span><br>        <span class="hljs-comment">//最好完全不要使用浮点数进行比较</span><br>        <span class="hljs-comment">//最好完全不要使用浮点数进行比较</span><br>        <span class="hljs-keyword">float</span> f = <span class="hljs-number">0.1f</span>;<br>        <span class="hljs-keyword">double</span> d = <span class="hljs-number">1.0</span> / <span class="hljs-number">10</span>;<br>        System.out.println(f == d);<span class="hljs-comment">//返回的是False</span><br>        System.out.println(f);<br>        System.out.println(d);<br>        <span class="hljs-keyword">float</span> d1 = <span class="hljs-number">12344567789239474f</span>;<br>        <span class="hljs-keyword">float</span> d2 = d1 + <span class="hljs-number">1</span>;<br>        System.out.println(d1 == d2);<span class="hljs-comment">//结果竟然是true</span><br><br>        System.out.println(<span class="hljs-string">&quot;====================&quot;</span>);<br>        <span class="hljs-comment">//字符拓展？</span><br><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;中&#x27;</span>;<br>        System.out.println(c1);<br>        System.out.println((<span class="hljs-keyword">int</span>)c1);<span class="hljs-comment">//强制转换</span><br>        System.out.println(c2);<br>        System.out.println((<span class="hljs-keyword">int</span>) c2);<span class="hljs-comment">//强制转换</span><br>        <span class="hljs-comment">//所有的字符本质还是数字</span><br>        <span class="hljs-comment">//编码 Unicode 表：97 =&#x27;a&#x27; 2字节 0-65536   Excel 2的16次幂 = 65536</span><br><br><br>        <span class="hljs-comment">//u00000   uFFFFF</span><br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">&#x27;\u0061&#x27;</span>;<br>        System.out.println(c3);  <span class="hljs-comment">//a</span><br><br>        <span class="hljs-comment">//转义字符</span><br>        <span class="hljs-comment">// \t 制表符</span><br>        <span class="hljs-comment">// \n 换行</span><br>        <span class="hljs-comment">//。。。。</span><br>        System.out.println(<span class="hljs-string">&quot;Hello\tWorld&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br><br>        String sa =<span class="hljs-keyword">new</span>  String(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        String sb = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        System.out.println(sa == sb);  <span class="hljs-comment">//这个是false</span><br><br>        String sc = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        String sd = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        System.out.println(sc == sd); <span class="hljs-comment">//这个是true</span><br><br>        <span class="hljs-comment">//为什么sa == sb 是错的，sc等于sd是对的</span><br>        <span class="hljs-comment">//这个得从对象  内存分析</span><br><br><br><br><br>        <span class="hljs-comment">//布尔值拓展</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (flag ==<span class="hljs-keyword">true</span>)&#123;&#125; <span class="hljs-comment">//新手才会写flag == true  ，因为flag就是true了，所以有些多于</span><br>        <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//老手</span><br>            <span class="hljs-comment">//代码要精简 less is more</span><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="二、引用类型-reference-type"><a href="#二、引用类型-reference-type" class="headerlink" title="二、引用类型 reference type"></a>二、引用类型 reference type</h4><blockquote><p>除基本类型之外，都是引用类型</p></blockquote><ol><li><strong>类</strong></li><li><strong>接口</strong></li><li><strong>数组</strong></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><blockquote><p>由于java的强类型语言，所以要进行有些运算的时候性需要用到类型转换</p><p>运算中，不同类型的数据要先转化为同一个类型，然后进行运算</p><p>注意：</p><p>1.内存溢出  </p><p>2.进度问题</p><p>3.不要用浮点数进行比较（原因：浮点数有舍入误差，存在接近但不等于的问题，是有限的）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从低----------------------------------高</span><br><span class="hljs-comment">//byte  short char int long float double</span><br><br><span class="hljs-comment">//从高到低 -----&gt;强制类型转换</span><br><span class="hljs-comment">//从低到高 -----&gt;自动类型转换</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> base;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/9 - 19:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">128</span>;<br>        <span class="hljs-comment">//如果这时候b是double型就没事</span><br>        <span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>) i;<span class="hljs-comment">//如果没有进行强制转换则会报错， 需要一个byte类型但是i是一个int类型</span><br>        <span class="hljs-comment">//上面b内存溢出</span><br>        <span class="hljs-comment">//强制转换    （类型）变量名   高到低</span><br>        <span class="hljs-comment">//自动类型转换  低---高</span><br>        System.out.println(i);<br>        System.out.println(b);<br>        <span class="hljs-comment">//这时候b = -128，因为内存溢出 byte最大为127</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 注意点：</span><br><span class="hljs-comment">        * 1.不能对布尔值进行转黄</span><br><span class="hljs-comment">        * 2.不能吧对象类型转换为不相干的类型</span><br><span class="hljs-comment">        * 3.再把高容量转换到低容量的时候，强制装换</span><br><span class="hljs-comment">        * 4.转换的时候可能存在内存溢出，或者精度问题</span><br><span class="hljs-comment">        * */</span><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        System.out.println((<span class="hljs-keyword">int</span>)<span class="hljs-number">23.7</span>);  <span class="hljs-comment">//23  精度问题</span><br>        System.out.println((<span class="hljs-keyword">int</span>)-<span class="hljs-number">45.89f</span>); <span class="hljs-comment">// -45</span><br><br>        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">int</span> d = c + <span class="hljs-number">1</span>;<br>        System.out.println(d);<br>        System.out.println((<span class="hljs-keyword">char</span>) d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><img src="D:\study\typora\截图\标识符.png" alt="标识符" style="zoom:150%;" /><p><strong>标识符列表</strong></p><blockquote><p>标识符是大小写敏感的</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java的特性和优势</title>
    <link href="/2021/04/12/java%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/"/>
    <url>/2021/04/12/java%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E4%BC%98%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="java的特性和优势"><a href="#java的特性和优势" class="headerlink" title="java的特性和优势"></a>java的特性和优势</h2><blockquote><p>2020/03/07</p></blockquote><p>特性：</p><ol><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ol><h2 id="java的三大版本"><a href="#java的三大版本" class="headerlink" title="java的三大版本"></a>java的三大版本</h2><ul><li><strong>javaSE：标准版（桌面程序，控制台开发）</strong></li><li>javaME(已经没落)</li><li><strong>javaEE：E企业级开发</strong></li></ul><h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2><p><em><strong>JDK：Java Development Kit</strong></em></p><p><em><strong>JRE：java Runtime Environment（运行环境）</strong></em></p><p><em><strong>JVM：java Virtual Machine</strong></em></p><h3 id="jdk、jre、jvm的关系"><a href="#jdk、jre、jvm的关系" class="headerlink" title="jdk、jre、jvm的关系"></a>jdk、jre、jvm的关系</h3><p>*<strong>jdk包含jre，jre包含jvm</strong></p><h3 id="JDK的卸载与安装"><a href="#JDK的卸载与安装" class="headerlink" title="JDK的卸载与安装"></a>JDK的卸载与安装</h3><blockquote><p>想安装先学会卸载</p></blockquote><h4 id="卸载JDK"><a href="#卸载JDK" class="headerlink" title="卸载JDK"></a>卸载JDK</h4><ol><li>找到JDK的安装目录并删除</li><li>找到JAVA_HOME的环境变量并删除</li><li>删除path里面有关于JAVA_HOME的所有变量</li><li>cmd里面输入java -version查看是否已经删除成功</li></ol><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><ol><li>百度搜索jdk8，找到下载地址</li><li>同意协议</li><li>下载电脑对应的版本</li><li>双击安装jdk</li><li><strong>记住安装的路径</strong></li><li>配置环境变量<ol><li>我的电脑–&gt;右键–&gt;属性</li><li>环境变量–&gt;创建JAVA_HOME</li><li>配置path变量</li></ol></li><li>测试JDK是否安装成功<ol><li>打开cmd</li><li>输入java -version</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>doc快捷键</title>
    <link href="/2021/04/12/doc%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/04/12/doc%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="doc常用快捷键"><a href="#doc常用快捷键" class="headerlink" title="doc常用快捷键"></a>doc常用快捷键</h1><blockquote><p>2020年3月7号</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#盘符切换 大写字母+:</span><br><span class="hljs-comment">#查看当前目录下的文件：dir</span><br><span class="hljs-comment">#切换目录 cd</span><br>    <span class="hljs-built_in">cd</span> /d f:  跨盘符需要加/d 不跨盘不需要<br>    <span class="hljs-built_in">cd</span> .. 返回上一级<br><br><span class="hljs-comment">#清理屏幕：cls</span><br><br><span class="hljs-comment">#退出终端：exit</span><br><br><span class="hljs-comment">#查看电脑ip：ipconfig</span><br><br><span class="hljs-comment">#打开应用</span><br>    calc 计算机<br>    mspaint 画图<br>    notepad 记事本<br>    <br><span class="hljs-comment">#ping 命令</span><br>ping + 网址<br>如：ping www.baidu.com<br><br><span class="hljs-comment">#文件操作</span><br>md 目录名 <br>rm 目录名<br><span class="hljs-built_in">cd</span>&gt; 文件名<br>del 文件名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaSE基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaSE基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程学习</title>
    <link href="/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="多线程的学习"><a href="#多线程的学习" class="headerlink" title="多线程的学习"></a>多线程的学习</h2><h3 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h3><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%AE%E5%BD%95.png"></p><h3 id="2-线程、进程、多线程"><a href="#2-线程、进程、多线程" class="headerlink" title="2.线程、进程、多线程"></a>2.线程、进程、多线程</h3><ol><li>线程(Thread)：线程就是独立的执行路径；</li><li>进程(process)：进程是执行程序的一次执行过程，它是一个动态的概念。<strong>是系统资源分配的单位</strong></li><li>一般一个进程中可以包括多个线程，当然一个进程中至少有一个线程，不然就没有存在的意义。<strong>线程是CPU调度和执行的单位</strong></li></ol><blockquote><p>注意：很多线程是模拟出来的，真正的多线程是只有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所有才有了同时执行的错觉。</p></blockquote><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E7%94%A8%E5%AF%B9%E6%AF%94.png"></p><ul><li>一个进程可以有多个线程，比如视频中有声音，弹幕，图像等等。</li></ul><h3 id="本章核心概念"><a href="#本章核心概念" class="headerlink" title="本章核心概念"></a>本章核心概念</h3><ul><li>线程就是独立的执行路径</li><li>在程序运行时，即使自己没有创建线程，后台也会有多个线程，比如主线程，gc线程(垃圾回收)</li><li>main()称之为主线程，为系统的入口，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的。</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ul><h3 id="3-线程的创建"><a href="#3-线程的创建" class="headerlink" title="3.线程的创建"></a>3.线程的创建</h3><h4 id="三种创建方式"><a href="#三种创建方式" class="headerlink" title="三种创建方式"></a>三种创建方式</h4><ul><li>Thread class        继承Thread类(重点)</li><li>Runnable接口       实现Runnable接口（重点）</li><li>Callable接口          实现Callable接口（了解即可，以后工作可能会用到）</li></ul><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><ul><li>自定义线程类继承 <strong>Thread类</strong></li><li>重写run()方法，编写方法体</li><li>创建线程对象，调用Start（）方法启动线程</li></ul><blockquote><p>线程不一定立刻执行，cpu安排调度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><span class="hljs-comment">//创建线程的方法一：</span><br><span class="hljs-comment">//继承Thread类，重写run()方法，调用start开启线程</span><br><span class="hljs-comment">//总结：注意线程不一定立即执行，由CPU调度执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//重写run方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码，重写run方法&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//调用主线程main</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        TestThread testThread = <span class="hljs-keyword">new</span> TestThread();<br><br>        <span class="hljs-comment">//调用start()方法开启线程</span><br>        testThread.start();<br><br>        <span class="hljs-comment">//主线程运行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程  &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p><strong>注意</strong></p><ul><li>可以看到是并发执行的。</li><li>调用的是start方法，不是run方法</li></ul><h4 id="网图下载"><a href="#网图下载" class="headerlink" title="网图下载"></a>网图下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestThread2</span><span class="hljs-params">(String url, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        WebDownloader webDownloader = <span class="hljs-keyword">new</span> WebDownloader();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.download(url, name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载的文件名：&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TestThread2 t1 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://b-ssl.duitang.com/uploads/item/201612/07/20161207082313_mN2iJ.thumb.700_0.jpeg&quot;</span>, <span class="hljs-string">&quot;测试1.jpg&quot;</span>);<br>        TestThread2 t2 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/6f061d950a7b0208d1ed7d8563d9f2d3572cc8aa.jpg&quot;</span>, <span class="hljs-string">&quot;测试2.jpg&quot;</span>);<br>        TestThread2 t3 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180505%2Fdab71918ecff4797afec962d88985406.jpeg&amp;refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1620268164&amp;t=a294065d113f9d2b3945c77eaf42ad56&quot;</span>, <span class="hljs-string">&quot;测试3.jpg&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//下载器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebDownloader</span></span>&#123;<br><br>    <span class="hljs-comment">//下载方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> URL(url), <span class="hljs-keyword">new</span> File(name));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;IO异常，download方法出现异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>导入一个jar包，commons io  可以百度搜索</li></ul><h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><br>        <span class="hljs-comment">//创建runnable接口的实现类对象</span><br>        TestThread3 testThread3 = <span class="hljs-keyword">new</span> TestThread3();<br>        <span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程代理</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testThread3);<br>        thread.start();<br><br><span class="hljs-comment">//        //或者等于</span><br><span class="hljs-comment">//        new Thread(testThread3).start();</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>继承Thread类</p><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li><strong>不建议使用：避免OOP单继承局限性</strong></li></ul></li><li><p>实现Runnable接口</p><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li><strong>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</strong></li></ul></li></ul><p><img src="E:\dgut\blog\wjx002\source\images\Thread\runnable代理.png"></p><h3 id="初始并发问题"><a href="#初始并发问题" class="headerlink" title="初始并发问题"></a>初始并发问题</h3><ul><li>多个对象同时操作同一个对象</li><li>比如  买车票</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-comment">//初识并发问题</span><br><span class="hljs-comment">//多个线程同时操作一个对象</span><br><span class="hljs-comment">//例如：买车票</span><br><br><br><span class="hljs-comment">//发现问题，多个线程操作同一个资源时，线程不安全，数据紊乱。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNums = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//模拟延时</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="hljs-string">&quot;票&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TestThread4 ticket = <span class="hljs-keyword">new</span> TestThread4();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%984.png"></p><ul><li>发现同一张票被多个人获取到了，这明显不符合火车票的规则，</li><li>线程不安全了，数据紊乱</li></ul><h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><p>案例：龟兔赛跑-Race</p><ol><li>首先定一个赛道距离，然后要离终点越来越近</li><li>判断比赛是否结束</li><li>打印出胜利者</li><li>龟兔赛跑开始</li><li>故事中是乌龟赢的，兔子要睡觉，所以我们来模拟兔子睡觉</li><li>终于，乌龟赢得了比赛</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-comment">//龟兔赛跑</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. 首先定一个赛道距离，然后要离终点越来越近</span><br><span class="hljs-comment">2. 判断比赛是否结束</span><br><span class="hljs-comment">3. 打印出胜利者</span><br><span class="hljs-comment">4. 龟兔赛跑开始</span><br><span class="hljs-comment">5. 故事中是乌龟赢的，兔子要睡觉，所以我们来模拟兔子睡觉</span><br><span class="hljs-comment">6. 终于，乌龟赢得了比赛</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Race</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String winner;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br><br>            <span class="hljs-comment">//模拟一下兔子休息</span><br>            <span class="hljs-keyword">if</span> (Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>) &amp;&amp; i % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                    System.out.println(<span class="hljs-string">&quot;兔子想睡觉&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-comment">//判断是否游戏结束，true则是出现胜利者了</span><br>            <span class="hljs-keyword">boolean</span> flag = gameOver(i);<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//兔子速度比较快</span><br>            <span class="hljs-keyword">if</span> (Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>)) &#123;<br>                i+=<span class="hljs-number">5</span>;<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;跑了-----&gt;&quot;</span>+i+<span class="hljs-string">&quot;步&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">gameOver</span><span class="hljs-params">(<span class="hljs-keyword">int</span> steps)</span> </span>&#123;<br><br>        <span class="hljs-comment">//判断有没有胜利者</span><br>        <span class="hljs-keyword">if</span> (winner != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//出现胜利者了</span><br>        <span class="hljs-keyword">if</span> (steps == <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-comment">//获取胜利者名字</span><br>            winner = Thread.currentThread().getName();<br>            <span class="hljs-comment">//输出胜利者是谁</span><br>            System.out.println(<span class="hljs-string">&quot;winner is &quot;</span> + winner);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Race race = <span class="hljs-keyword">new</span> Race();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;兔子&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;乌龟&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91.png"></p><h3 id="实现Callable接口（了解即可）"><a href="#实现Callable接口（了解即可）" class="headerlink" title="实现Callable接口（了解即可）"></a>实现Callable接口（了解即可）</h3><ol><li>实现Callable接口，需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务</li><li>提交执行</li><li>获取结果</li><li>关闭服务</li></ol><p><img src="/images/Thread/Callable.png"></p><p><strong>好处</strong></p><ul><li>可以抛出异常</li><li>获取返回值</li></ul><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><p><strong>总结：</strong></p><ul><li>真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实角色</li></ul><p><strong>好处：</strong></p><ul><li>代理对象可以做很多真实对象做不了的事情</li><li>真实对象专注于做自己的事情</li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><ul><li><p>λ希腊字母表中排序第十一位的字母，英语名称lambda</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>其实质属于函数式编程的概念</p><ul><li>(params)-&gt;expression[表达式]</li><li>(params) -&gt; statement[语句]</li><li>(params) -&gt; {statements}</li></ul></li><li><p>为什么要使用lamda表达式</p><ul><li>避免匿名内部类定义过多</li><li>可以使你的代码更简洁</li><li>去除掉一些没有意义的代码，只剩下核心的逻辑部分</li></ul></li><li><p>理解Functional Interface(函数式接口) 是学习java8 lambda表达式的关键所在</p></li><li><p>函数式接口的定义：</p><ul><li>任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口<ul><li>public interface Runnable{</li><li>abstract void Run（）;</li><li>}</li></ul></li><li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lambda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda</span> </span>&#123;<br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;我喜欢1&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我喜欢2&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        iLove like = <span class="hljs-keyword">new</span> Like();<br>        like.love();<br>        like = <span class="hljs-keyword">new</span> Like2();<br>        like.love();<br>        like = <span class="hljs-keyword">new</span> Like3();<br>        like.love();<br><br>        <span class="hljs-comment">//匿名内部类：没有类的名称，必须借助接口或者父类</span><br>        like = <span class="hljs-keyword">new</span> iLove() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我喜欢333&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        like = ()-&gt; System.out.println(<span class="hljs-string">&quot;我喜欢22&quot;</span>);<br><br>        <span class="hljs-comment">//总结：</span><br>        <span class="hljs-comment">//lambda表达式只能在一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</span><br>        <span class="hljs-comment">//前提接口是函数式接口，就是接口里只有一个函数</span><br>        <span class="hljs-comment">//多个函数也可以去掉参数类型，要去掉就都去掉，必须加上括号</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">iLove</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//首先可以是内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>//总结：<pre><code>//lambda表达式只能在一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹//前提接口是函数式接口，就是接口里只有一个函数//多个函数也可以去掉参数类型，要去掉就都去掉，必须加上括号</code></pre></li></ul><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>五个状态：</p><ul><li>创建状态</li><li>就绪状态</li><li>阻塞状态</li><li>运行状态</li><li>死亡状态</li></ul><h4 id="线程的转换过程"><a href="#线程的转换过程" class="headerlink" title="线程的转换过程"></a>线程的转换过程</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png"></p><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%AE%9E%E9%99%85%E8%BD%AC%E6%8D%A2.png"></p><h4 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setPriority（int newPriority)</td><td>更改线程的优先级</td></tr><tr><td>static void sleep(long millis)</td><td>在指定的毫秒内让当前正在执行的线程休眠</td></tr><tr><td>void join()</td><td>等待该线程终止</td></tr><tr><td>static void yield()</td><td>暂停当前正在执行的线程对象，并执行其他线程</td></tr><tr><td>void interrupt()</td><td>中断线程，别用这种方式</td></tr><tr><td>boolean isAlive()</td><td>测试线程是否处于活动状态</td></tr></tbody></table><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p><img src="/images/Thread/%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><br><span class="hljs-comment">//测试stop</span><br><span class="hljs-comment">//1.建议线程正常停止----&gt;利用次数，不建议死循环</span><br><span class="hljs-comment">//建议使用标志位-----&gt;设置一个标志位</span><br><span class="hljs-comment">//3.不要使用stop或者destroy等过时或者JDk不建议使用的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testStop</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//1.设置一个标志位</span><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br><br>    <span class="hljs-comment">//转换标志位</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run Thread &quot;</span> + i++);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        testStop testStop = <span class="hljs-keyword">new</span> testStop();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testStop);<br>        <span class="hljs-comment">//开启线程</span><br>        thread.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main线程&quot;</span> + i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9900</span>) &#123;<br>                <span class="hljs-comment">//当主线程i等于990时，停止线程</span><br>                testStop.stop();<br>                System.out.println(<span class="hljs-string">&quot;线程终止了&quot;</span>);<br>            &#125;<br><br>            ;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0.png"></p><ul><li>sleep(时间) 指定当前线程的阻塞的毫秒数</li><li>sleeo存在异常interruptedException</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep时间可以模拟网络延时，倒计时等</li><li>每个对象都有一个锁lock，sleep不会释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//模拟倒计时</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testSleep2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timeDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(num--);<br><br>            <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//打印当前系统时间</span><br>        <span class="hljs-comment">//获取当前系统时间</span><br>        Date startTime = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<br><br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                startTime = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//模拟网络延时: 放大问题的发生性</span><br><br><br><span class="hljs-keyword">import</span> com.jiaxu.demo01.Race;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testSleep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNums = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>            <span class="hljs-comment">//模拟延时</span><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="hljs-string">&quot;票&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        testSleep testSleep = <span class="hljs-keyword">new</span> testSleep();<br>        <span class="hljs-keyword">new</span> Thread(testSleep,<span class="hljs-string">&quot;小米&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(testSleep,<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(testSleep, <span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><ul><li>礼让线程，让当前正在执行的线程暂停，但是不阻塞</li><li>将线程从运行 状态转为就绪状态</li><li><strong>让cpu重新调度，礼让不一定成功！！！看CPU心情</strong></li></ul><p><strong>Thread.yield</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testYield</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyYield myYield = <span class="hljs-keyword">new</span> MyYield();<br><br>        <span class="hljs-keyword">new</span> Thread(myYield, <span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(myYield, <span class="hljs-string">&quot;b&quot;</span>).start();<br>        <br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyYield</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程开始执行&quot;</span>);<br>        <span class="hljs-comment">//线程礼让</span><br>        Thread.yield();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程终止执行&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>线程礼让</li></ul><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9.png"></p><ul><li>不礼让的情况下</li></ul><p><img src="/images/Thread/%E4%B8%8D%E7%A4%BC%E8%AE%A9.png"></p><h4 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h4><p><strong>Join</strong></p><ul><li>Join合并线程，待此线程执行完毕，再执行其他线程，其他线程阻塞</li><li>可以想象成插队</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//测试join方法</span><br><span class="hljs-comment">//想象成插队</span><br><br><span class="hljs-keyword">import</span> com.sun.javafx.sg.prism.web.NGWebView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testJoin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;线程vip来了&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        testJoin testJoin = <span class="hljs-keyword">new</span> testJoin();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testJoin);<br>        thread.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">200</span>) &#123;<br>                thread.join();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;main线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程观测状态"><a href="#线程观测状态" class="headerlink" title="线程观测状态"></a>线程观测状态</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E8%A7%82%E6%B5%8B%E8%BD%AC%E6%80%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testState</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <br><br>            System.out.println(<span class="hljs-string">&quot;//////////&quot;</span>);<br><br>        &#125;);<br><br><br>        <span class="hljs-comment">//观察状态</span><br>        Thread.State state = thread.getState();<br>        <span class="hljs-comment">//输出状态</span><br>        System.out.println(state);<br><br>        <span class="hljs-comment">//观察启动后</span><br>        thread.start();<br>        state = thread.getState();<span class="hljs-comment">//更新状态</span><br>        System.out.println(state);<br><br>        <span class="hljs-comment">//只要线程不结束，则一直输出线程状态</span><br>        <span class="hljs-keyword">while</span> (state != Thread.State.TERMINATED) &#123;<br><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//更新线程状态</span><br>            state = thread.getState();<br>            <span class="hljs-comment">//输出线程状态</span><br>            System.out.println(state);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>死亡状态后不可以在启动线程 了</strong></p><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><ul><li>线程优先级高不一定先执行，只不过是执行的可能性高了</li><li>看cpu调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><span class="hljs-comment">//测试线程的优先级</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testPriority</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//主线程默认优先级</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + Thread.currentThread().getPriority());<br><br>        MyPriority myPriority = <span class="hljs-keyword">new</span> MyPriority();<br><br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread3 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread4 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread5 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread6 = <span class="hljs-keyword">new</span> Thread(myPriority);<br><br>        <span class="hljs-comment">//设置优先级，在启动</span><br>        thread1.start();<br><br>        thread2.setPriority(<span class="hljs-number">1</span>);<br>        thread2.start();<br>        <br><br>        thread3.setPriority(Thread.MAX_PRIORITY);<br>        thread3.start();<br><br>        thread4.setPriority(<span class="hljs-number">7</span>);<br>        thread4.start();<br><br>        thread5.setPriority(<span class="hljs-number">4</span>);<br>        thread5.start();<br><br>        thread6.setPriority(<span class="hljs-number">3</span>);<br>        thread6.start();<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//输出线程的优先级</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-----&gt;&quot;</span> + Thread.currentThread().getPriority());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码显示结果</strong></p><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%E6%AF%94%E8%BE%83.png"></p><h4 id="守护线程（daemon）"><a href="#守护线程（daemon）" class="headerlink" title="守护线程（daemon）"></a>守护线程（daemon）</h4><ul><li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕（gc垃圾回收）</li><li>如后台记录操作日志、监控内存、垃圾回收等待..</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//测试守护线程</span><br><span class="hljs-comment">//上帝保护你</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testDaemon</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        God god = <span class="hljs-keyword">new</span> God();<br>        You you = <span class="hljs-keyword">new</span> You();<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(god);<br>        thread.setDaemon(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//默认是false表示是用户线程</span><br>        <span class="hljs-comment">//正常线程都是用户线程</span><br><br>        thread.start();<span class="hljs-comment">//开启守护线程</span><br>        <span class="hljs-keyword">new</span> Thread(you).start();<span class="hljs-comment">//开启用户线程...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//上帝</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;上帝保佑你&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//你</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36500</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你开心的活着&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=========goodbye! world!======&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><ul><li>多个线程操作同一个资源</li><li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步，线程同步就是一种等待机制，多个需要同时访问此对象的线程进入到这个<strong>对象的线程池</strong>形成队列，等待前面线程使用完毕，下一个线程再使用</li><li>由于同一进程的多个线程共享一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问的正确性，在访问是加入<strong>锁机制 synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换 ，和 调度延时，引起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li></ul></li></ul><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><ul><li>同一个对象被多个线程同时操作</li></ul><h5 id="队列和锁"><a href="#队列和锁" class="headerlink" title="队列和锁"></a>队列和锁</h5><ul><li>保证线程同步的安全性</li></ul><h4 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h4><ul><li>买车票</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnselfBuyTicket</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BuyTicket buyTicket = <span class="hljs-keyword">new</span> BuyTicket();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;小米&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;小孩&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;黄牛&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//标志位</span><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//买票</span><br>        <span class="hljs-keyword">if</span> (ticket &lt;= <span class="hljs-number">0</span>) &#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟延时</span><br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//买一张就少一张</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;买了第&quot;</span> + ticket-- + <span class="hljs-string">&quot;张票&quot;</span>);<br><br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                buy();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>银行取钱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-comment">//不安全的取钱</span><br><span class="hljs-comment">//两个人去银行取钱</span><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBank</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Account account = <span class="hljs-keyword">new</span> Account(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br>        Drawing wo = <span class="hljs-keyword">new</span> Drawing(account, <span class="hljs-number">50</span>, <span class="hljs-string">&quot;wo&quot;</span>);<br>        Drawing girl = <span class="hljs-keyword">new</span> Drawing(account, <span class="hljs-number">100</span>,<span class="hljs-string">&quot;girl&quot;</span>);<br><br>        wo.start();<br>        girl.start();<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-comment">//余额</span><br>    <span class="hljs-keyword">int</span> money;<br>    <span class="hljs-comment">//卡名</span><br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//银行：模拟取款</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    Account account;<span class="hljs-comment">//取钱账户</span><br><br>    <span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-keyword">int</span> drawingMoney;<br><br>    <span class="hljs-comment">//手里有多少钱</span><br>    <span class="hljs-keyword">int</span> nowMoney;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-keyword">int</span> drawingMoney, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        <span class="hljs-keyword">this</span>.account = account;<br>        <span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;<br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//判断有没有钱</span><br>        <span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;钱不够了&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//卡的余额 = 余额 - 你取的钱</span><br>        account.money = account.money - drawingMoney;<br>        <span class="hljs-comment">//手里的钱</span><br><br>        nowMoney = nowMoney + drawingMoney;<br>        System.out.println(account.name + <span class="hljs-string">&quot;余额为：&quot;</span> + account.money);<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;手里的钱&quot;</span> + nowMoney);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>list</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(Thread.currentThread().getName());<br>            &#125;).start();<br><br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(list.size());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><ul><li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对一天机制，这套机制就是synchronized关键字，他包括两种用法：<ul><li>synchronized方法和synchronized块</li><li>同步方法：public synchronized void method（int args）{}</li></ul></li><li>synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，后面被阻塞的线程才能获得这个锁，继续执行<ul><li>缺陷：若将一个大的方法申明为synchronized将影响效率</li></ul></li></ul><h4 id="同步方法弊端"><a href="#同步方法弊端" class="headerlink" title="同步方法弊端"></a>同步方法弊端</h4><p><img src="/images/Thread/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%BC%8A%E7%AB%AF.png"></p><h4 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h4><p><img src="E:\dgut\blog\wjx002\source\images\Thread\同步块.png"></p><p><strong>锁的对象是要修改的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (list) &#123;<br>    list.add(Thread.currentThread().getName());<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才可以运行，而且导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<strong>两个以上对象的锁</strong>时，就可能发生”死锁“的问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lock;<br><br><span class="hljs-comment">//死锁：一个同步块拥有两个或两个以上的对象的锁，才有可能发生</span><br><span class="hljs-comment">//互相占有其他线程需要的资源，等待其他线程释放资源才可以运行，</span><br><span class="hljs-comment">//导致停止执行的情形</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        MakeUp person1 = <span class="hljs-keyword">new</span> MakeUp(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;火姑娘&quot;</span>);<br>        MakeUp person2 = <span class="hljs-keyword">new</span> MakeUp(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br>        person1.start();<br>        person2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//化妆品类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lipstick</span></span>&#123;<br><br>&#125;<br><br><br><span class="hljs-comment">//镜子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mirror</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//化妆执行</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-comment">//保证需要的资源只有一份，用static来保证只有一份</span><br>    <span class="hljs-keyword">static</span> Lipstick lipstick = <span class="hljs-keyword">new</span> Lipstick();<br>    <span class="hljs-keyword">static</span> Mirror mirror = <span class="hljs-keyword">new</span> Mirror();<br><br>    <span class="hljs-comment">//选择</span><br>    <span class="hljs-keyword">int</span> choice;<br>    <span class="hljs-comment">//化妆的人</span><br>    String girl;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MakeUp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> choice, String girl)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.choice = choice;<br>        <span class="hljs-keyword">this</span>.girl = girl;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//运行化妆方法</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            makeup();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//化妆方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-comment">//开始化妆</span><br>            <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>                <span class="hljs-comment">//获取到了口红的锁</span><br>                System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>                    <span class="hljs-comment">//获取到了镜子的锁</span><br>                    System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//开始化妆</span><br>            <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>                <span class="hljs-comment">//获取到了镜子的锁</span><br>                System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>                    <span class="hljs-comment">//获取到了口红的锁</span><br>                    System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这样就发生了死锁、</p></blockquote><p><img src="/images/Thread/%E6%AD%BB%E9%94%81.png"></p><blockquote><p>一个同步块里面有了两个对象的锁，并且还互相持有对方的资源不放手，导致程序停止</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) &#123;<br><br>           <span class="hljs-comment">//开始化妆</span><br>           <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>               <span class="hljs-comment">//获取到了口红的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>               Thread.sleep(<span class="hljs-number">1000</span>);<br><br>           &#125;<br>           <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>               <span class="hljs-comment">//获取到了镜子的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">//开始化妆</span><br>           <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>               <span class="hljs-comment">//获取到了镜子的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>               Thread.sleep(<span class="hljs-number">1000</span>);<br><br>           &#125;<br>           <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>               <span class="hljs-comment">//获取到了口红的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><blockquote><p>解决方法就是使同一个代码块里不要有互相持有对方资源的多个对象</p></blockquote><p><img src="/images/Thread/%E4%B8%8D%E6%AD%BB%E9%94%81.png" alt="正常应该的运行"></p><h4 id="死锁避免方法"><a href="#死锁避免方法" class="headerlink" title="死锁避免方法"></a>死锁避免方法</h4><ul><li>产生死锁的四个必要条件：<ul><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求和保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程已获得的资源，在未使用完前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾衔接的循环等待资源关系。</li></ul></li></ul><p><strong>只要我们破获其中的任意一种或多个条件就可以避免死锁的发生</strong></p><h3 id="lock（锁）"><a href="#lock（锁）" class="headerlink" title="lock（锁）"></a>lock（锁）</h3><ul><li>从JDK5.0开始，java提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。同步锁使用Lock对象充当</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象进行加锁，线程开始访问共享资源之前应先获得Lock对象</li><li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显示加锁，释放锁。</li></ul><blockquote><p>ReentrantLock  可重入锁</p></blockquote><p><img src="/images/Thread/%E9%94%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lock;<br><br><span class="hljs-keyword">import</span> java.text.BreakIterator;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">reenTrantLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BuyTickey buyTickey = <span class="hljs-keyword">new</span> BuyTickey();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//还是用买火车票的例子</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyTickey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">int</span> ticketNum = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//定义可重入锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (ticketNum &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br><br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                System.out.println(ticketNum--);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="synchronized-与Lock-的对比"><a href="#synchronized-与Lock-的对比" class="headerlink" title="synchronized 与Lock 的对比"></a>synchronized 与Lock 的对比</h4><ul><li>Lock是显式锁（手动开启和关闭锁，别忘了关闭锁）synchronized是隐式锁，除了作用域自动释放</li><li>Lock锁只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费更少的时间来调度线程性能更好。并且具有更好的延展性（提供更多的子类）</li><li>优先使用顺序：<ul><li>Lock &gt; 同步代码块（已经进入方法体，分配了相应的资源） &gt; 同步方法（在方法体之外）</li></ul></li></ul><h4 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h4><ul><li>生产者消费者模式</li></ul><h4 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h4><ul><li>应用场景：生产者消费者问题<ul><li>假设仓库只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费</li><li>如果仓库里没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</li><li>仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库里再次放入产品为止</li></ul></li></ul><p><img src="E:\dgut\blog\wjx002\source\images\Thread\线程通信分析.png"></p><ul><li>java提供了几个方法解决线程之间的通信问题</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，知道其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notityAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级高的线程优先调度</td></tr></tbody></table><p><strong>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常lllegalMonitorStateException</strong></p><h4 id="解决方式1"><a href="#解决方式1" class="headerlink" title="解决方式1"></a>解决方式1</h4><p>并发协作模型“生产者/消费者模式”—&gt;管理法</p><ul><li>生产者：负责生产数据的模型（可能是方法、对象、线程、进程）；</li><li>消费者：负责处理数据的模块（可能是方法、对象、线程、进程）；</li><li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区”</li></ul><p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p><p><img src="/images/Thread/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85.png"></p><h4 id="解决方式2"><a href="#解决方式2" class="headerlink" title="解决方式2"></a>解决方式2</h4><ul><li>并发协作模型“生产者/消费者模式”—-&gt;信号灯法</li></ul><p>解决方法一：代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.model.productAndConsumer;<br><br><span class="hljs-comment">//管程法</span><br><span class="hljs-comment">//生产者消费者模型</span><br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">process</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SynContainer synContainer = <span class="hljs-keyword">new</span> SynContainer();<br>        <span class="hljs-keyword">new</span> Product(synContainer).start();<br>        <span class="hljs-keyword">new</span> Consumer(synContainer).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//生产鸡</span><br>    SynContainer synContainer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Product</span><span class="hljs-params">(SynContainer synContainer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.synContainer = synContainer;<br>    &#125;<br><br><br>    <span class="hljs-comment">//生产</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;生产了&quot;</span> + i + <span class="hljs-string">&quot;只鸡&quot;</span>);<br>            synContainer.push(<span class="hljs-keyword">new</span> Chicken(i));<br>        &#125;<br>                <br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    SynContainer synContainer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(SynContainer synContainer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.synContainer = synContainer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消费了第&quot;</span>+synContainer.pop().id+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//产品</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chicken</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chicken</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynContainer</span> </span>&#123;<br>    <span class="hljs-comment">//放产品的地方</span><br>    <span class="hljs-comment">//对象数组 指定大小</span><br>    Chicken[] chickens = <span class="hljs-keyword">new</span> Chicken[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//统计鸡的数量</span><br>    <span class="hljs-keyword">int</span> account = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//生产者放入产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Chicken chicken)</span>  </span>&#123;<br><br>        <span class="hljs-comment">//鸡放满了，只能消费 生产停止</span><br>        <span class="hljs-keyword">if</span> (account &gt;= chickens.length-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//否则就没有满</span><br>        <span class="hljs-comment">//没有满就继续放鸡</span><br>        chickens[account] = chicken;<br>        account++;<br>        <span class="hljs-comment">//通知消费者消费</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br><br>    &#125;<br><br>    <span class="hljs-comment">//消费者放入产品</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title">pop</span><span class="hljs-params">()</span>  </span>&#123;<br>        <span class="hljs-comment">//如果没有鸡了，消费者停止</span><br>        <span class="hljs-keyword">if</span> (account &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        account--;<br>        Chicken chicken = chickens[account];<br><br>        <span class="hljs-comment">//唤醒生产者</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br><br>        <span class="hljs-keyword">return</span> chicken;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法2：信号灯法</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.model.productAndConsumer;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<br><br><span class="hljs-comment">//信号灯法</span><br><span class="hljs-comment">//通过一个flag来调度</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Semaphore</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TV tv = <span class="hljs-keyword">new</span> TV();<br>        <span class="hljs-keyword">new</span> Actor(tv).start();<br>        <span class="hljs-keyword">new</span> watch(tv).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//演员</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    TV tv;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">(TV tv)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tv = tv;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;快乐大本营&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;抖音：记录美好生活&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//观看者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">watch</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    TV tv;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">watch</span><span class="hljs-params">(TV tv)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tv = tv;<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">this</span>.tv.watch();<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//电视剧</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TV</span> </span>&#123;<br>    <span class="hljs-comment">//演员表演，观众等待 T</span><br>    <span class="hljs-comment">//观众观看，演员等待F</span><br>    String vedio;<br><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-comment">//表演</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String vedio)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;演员表演了：&quot;</span> + vedio);<br>        <span class="hljs-comment">//通知观众观看</span><br>        <span class="hljs-keyword">this</span>.notify();<br>        <span class="hljs-keyword">this</span>.vedio = vedio;<br>        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;<br>    &#125;<br><br>    <span class="hljs-comment">//观看</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watch</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;观众观看了：&quot;</span> + vedio);<br>        <span class="hljs-comment">//通知演员表演</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><ul><li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</li><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。</li><li>好处：<ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理（……）<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAlivaTime：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul></li></ul><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.theadpool;<br><br><span class="hljs-comment">//测试线程池</span><br><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建服务，创建线程池</span><br>       <span class="hljs-comment">//Executors.newFixedThreadPool(10)参数是线程池的大小</span><br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><br>        <span class="hljs-comment">//执行</span><br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br><br>        <span class="hljs-comment">//关闭连接</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1006笨阶乘</title>
    <link href="/2021/04/01/1006%E7%AC%A8%E9%98%B6%E4%B9%98/"/>
    <url>/2021/04/01/1006%E7%AC%A8%E9%98%B6%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><blockquote><p>通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。</p><p>相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。</p><p>例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p><p>另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。</p><p>实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：4<br>输出：7<br>解释：7 =<span class="hljs-number"> 4 </span>*<span class="hljs-number"> 3 </span>/<span class="hljs-number"> 2 </span>+ 1<br></code></pre></td></tr></table></figure><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">每四个一个循环，顺序是* / + -，所以用 <span class="hljs-keyword">index</span> 对 四 进行取余<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">0</span>  *<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">1</span>  /<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">2</span>  +<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">3</span>  -<br><br>我们可以选择用栈来存储乘法除法之后的结果，在用 加  减 来计算数据<br></code></pre></td></tr></table></figure><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_1006</span>笨阶乘 </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">int</span> <span class="hljs-title">clumsy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        stack.push(N);<br>        N--;<br>        <span class="hljs-comment">//用于计算下一个计算法是什么</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (N &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//将计算完的内容存入栈中</span><br>            <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>                stack.push(stack.pop() * N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>) &#123;<br>                stack.push(stack.pop() / N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">2</span>) &#123;<br>                stack.push(N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>) &#123;<br>                stack.push(-N);<br>            &#125;<br>            N--;<br>            index++;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            sum += stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        _1006笨阶乘 example = <span class="hljs-keyword">new</span> _1006笨阶乘();<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">10</span>;<br>        System.out.println(example.clumsy(<span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>59螺旋矩阵2</title>
    <link href="/2021/03/20/59%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B52/"/>
    <url>/2021/03/20/59%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B52/</url>
    
    <content type="html"><![CDATA[<h2 id="59、螺旋矩阵2"><a href="#59、螺旋矩阵2" class="headerlink" title="59、螺旋矩阵2"></a>59、螺旋矩阵2</h2><blockquote><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p></blockquote><p><img src="D:\study\typora\截图\实例.png"></p><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：n = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[[1,2,3],[8,9,4],[7,6,5]]</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>思路：</strong></p><p>按照上一行—&gt;右一列—-&gt;下一行—–&gt;左一列的思路来做</p><p>用left  right top down来记录上下左右的位置</p><p>每次遍历外一圈之后，上下左右相应增减</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> com.sun.deploy.panel.ITreeNode;<br><span class="hljs-keyword">import</span> sun.security.util.Length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>:2021/3/20 - 19:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_59</span>螺旋矩阵2 </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] generataMatrix(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-comment">//n*n数组第一个数是1开始的</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//创建一个n*n的二维数组</span><br>        <span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        <span class="hljs-comment">//记录左边，上边，右边，下边移动到哪里了</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> down = n - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//开始遍历且输出数组</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= down) &#123;<br>            <span class="hljs-comment">//输出上面一行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = left; column &lt;= right; column++) &#123;<br>                array[top][column] = num;<br>                num++;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                1 2 3 4</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>            <span class="hljs-comment">//输出右边一列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = top + <span class="hljs-number">1</span>; row &lt;= down; row++) &#123;<br>                array[row][right] = num;<br>                num++;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                5</span><br><span class="hljs-comment">                6</span><br><span class="hljs-comment">                7</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (left &lt; right &amp;&amp; top &lt; down) &#123;<br>                <span class="hljs-comment">//倒着输出下面一行</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = right - <span class="hljs-number">1</span>; column &gt; left; column--) &#123;<br><br>                    array[down][column] = num;<br>                    num++;<br>                &#125;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    8</span><br><span class="hljs-comment">                   9</span><br><span class="hljs-comment">                 10</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-comment">//倒着获取左一列</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = down; row &gt; top; row--) &#123;<br>                    array[row][left] = num;<br>                    num++;<br>                &#125;<br>            &#125;<br>            left++;<br>            right--;<br>            top++;<br>            down--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        array = generataMatrix(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] ints : array) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> anInt : ints) &#123;<br>                System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-LeedCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计哈希集合</title>
    <link href="/2021/03/18/%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88-1/"/>
    <url>/2021/03/18/%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88-1/</url>
    
    <content type="html"><![CDATA[<h2 id="705-设计哈希集合"><a href="#705-设计哈希集合" class="headerlink" title="705.设计哈希集合"></a>705.设计哈希集合</h2><blockquote><p>2021/02/14 星期日</p></blockquote><blockquote><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 MyHashSet 类：</p><p>void add(key) 向哈希集合中插入值 key 。<br>bool contains(key) 返回哈希集合中是否存在这个值 key 。<br>void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</p><p>示例：</p><p>输入：<br>[“MyHashSet”, “add”, “add”, “contains”, “contains”, “add”, “contains”, “remove”, “contains”]<br>[[], [1], [2], [1], [3], [2], [2], [2], [2]]<br>输出：<br>[null, null, null, true, false, null, true, null, false]</p><p>解释：<br>MyHashSet myHashSet = new MyHashSet();<br>myHashSet.add(1);      // set = [1]<br>myHashSet.add(2);      // set = [1, 2]<br>myHashSet.contains(1); // 返回 True<br>myHashSet.contains(3); // 返回 False ，（未找到）<br>myHashSet.add(2);      // set = [1, 2]<br>myHashSet.contains(2); // 返回 True<br>myHashSet.remove(2);   // set = [1]<br>myHashSet.contains(2); // 返回 False ，（已移除）</p><p>提示：</p><p>0 &lt;= key &lt;= 106<br>最多调用 104 次 add、remove 和 contains 。</p></blockquote><p><strong>简单数组解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashSet</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span>[] nodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">1000009</span>];<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        nodes[key] = <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        nodes[key] = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nodes[key];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>链表解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> java.security.Key;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/14 - 20:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_705</span>哈希集合 </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Your MyHashSet object will be instantiated and called as such:</span><br><span class="hljs-comment">     * MyHashSet obj = new MyHashSet();</span><br><span class="hljs-comment">     * obj.add(key);</span><br><span class="hljs-comment">     * obj.remove(key);</span><br><span class="hljs-comment">     * boolean param_3 = obj.contains(key);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> BASE = <span class="hljs-number">769</span>;<br>    <span class="hljs-keyword">private</span> LinkedList[] data;<span class="hljs-comment">//链表数组？</span><br>    <span class="hljs-keyword">public</span> _705哈希集合()&#123;<span class="hljs-comment">//初始化</span><br>        data = <span class="hljs-keyword">new</span> LinkedList[BASE];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; BASE; i++) &#123;<br>            data[i] = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 添加操作</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-comment">//通过hash计算出要放在哪个链表数组里的下标</span><br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        <span class="hljs-comment">//创建一个链表的迭代器，来接收链表的内容</span><br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-comment">//判断链表的的内容是否还有下一个</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-comment">//将链表的内容赋予element</span><br>            Integer element = iterator.next();<br>            <span class="hljs-comment">//如果内容相等，则返回空，不做操作</span><br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果内容不相同，则添加入链表</span><br>        data[h].offerLast(key);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Integer element = iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                data[h].remove(element);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Integer element = iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key % BASE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        _705哈希集合 hashtable = <span class="hljs-keyword">new</span> _705哈希集合();<br>        hashtable.add(<span class="hljs-number">1</span>);<br>        hashtable.add(<span class="hljs-number">2</span>);<br>        hashtable.add(<span class="hljs-number">3</span>);<br>        hashtable.add(<span class="hljs-number">4</span>);<br><br>        System.out.println(hashtable.contains(<span class="hljs-number">1</span>));<br>        hashtable.remove(<span class="hljs-number">1</span>);<br>        System.out.println(hashtable.contains(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2021/03/18/LeetCode/"/>
    <url>/2021/03/18/LeetCode/</url>
    
    <content type="html"><![CDATA[<h2 id="224-基本计算器"><a href="#224-基本计算器" class="headerlink" title="224.基本计算器"></a>224.基本计算器</h2><blockquote><p>2021/03/10 星期三</p></blockquote><blockquote><p>实现一个基本的计算器来计算一个简单的字符串表达式 s 的值。</p><p>示例 1：</p><p>输入：s = “1 + 1”<br>输出：2<br>示例 2：</p><p>输入：s = “ 2-1 + 2 “<br>输出：3<br>示例 3：</p><p>输入：s = “(1+(4+5+2)-3)+(6+8)”<br>输出：23</p><p>提示：</p><p>1 &lt;= s.length &lt;= 3 * 105<br>s 由数字、’+’、’-‘、’(‘、’)’、和 ‘ ‘ 组成<br>s 表示一个有效的表达式</p></blockquote><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/10 - 20:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_224</span>基础计算器 </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-comment">//创建一个栈用来存储符号</span><br>        Deque&lt;Integer&gt; ops = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        ops.push(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = s.length();<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                sign =ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                sign = -ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                ops.push(sign);<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                ops.pop();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//临时存放每一个数字</span><br>                <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (i&lt;n&amp;&amp;Character.isDigit(s.charAt(i)))&#123;<br>                    num = num * <span class="hljs-number">10</span> + s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    i++;<br>                &#125;<br>                <span class="hljs-comment">//实时更新结果</span><br>                result += sign * num;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><span class="hljs-comment">//测试数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;(1+(4+5+2)-3)+(6+8)&quot;</span>;<br>        System.out.println(calculate(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>这道题首先考虑到没有乘除，只有加减运算和括号</p><p>用了栈，sign作为信号，加减，以及括号进栈，用result实时更新计算结果</p><p>这一题的思路：</p><p>用n = s.length;统计string的长度，遍历整个string，</p><p>用s.charAt(i)判断进来的字符是什么</p><p>用else-if语句判断进来的字符属于什么</p><p>如果是空格，则继续下一个字符</p><p>如果是’+’号，则更新sign为正1；</p><p>如果是’-‘号，则更新sign为—ops.peek()，ops.peek()可以使得括号前为’—‘号，则sign的正负相反，若为 ‘+’ 号，则sign值正常；</p><p>如果是’(‘号，则push(sign)更新ops栈里的第一个数字，好用peek()函数检验括号前的符号</p><p>如果是’)’号，则pop()删除ops栈里面的第一个数字，使得括号运算结束</p><hr><blockquote><p><strong>知识点</strong></p><ol><li>Deque容器</li></ol><p> deque容器为一个给定<em><em>**类型*<em><strong>的元素进行</strong>线性处理</em>*，像向量一样，它</em>*</em>*能够快速地随机访问任一个元素*<em><strong>，并且能够高效地</strong></em>*插入和删除*<em><strong>容器的尾部元素。但它又与vector不同，</strong></em>*deque支持高效插入和删除容器的头部元素*<em><strong>，因此也叫做</strong></em>*双端队列****。</p><p><strong>Deque是一个接口，LinkedList 是其实现类</strong></p><ol start="2"><li>LinkedList</li></ol><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>链表可分为单向链表和双向链表。</p><p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png" alt="img"></p><p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png" alt="img"></p><p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p><p>与 ArrayList 相比，LinkedList 的增加和删除对操作效率更高，而查找和修改的操作效率较低。</p><p><strong>以下情况使用 ArrayList :</strong></p><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul><p><strong>以下情况使用 LinkedList :</strong></p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul><ol start="3"><li>String.charAt(int i)</li></ol><p><strong>字符串的第i个字符是什么（从0开始）</strong></p><ol start="4"><li>Character.isDigit(char ch)</li></ol><p><strong>判断字符ch是否为数字，如果是数字，则返回true，反之，false</strong></p></blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265122668445536"><strong>查看Deque的用法和理解</strong></a></p><p><code>Deque</code>是一个接口，它的实现类有<code>ArrayDeque</code>和<code>LinkedList</code>。</p><p>我们发现<code>LinkedList</code>真是一个全能选手，它即是<code>List</code>，又是<code>Queue</code>，还是<code>Deque</code>。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 不推荐的写法:</span><br>LinkedList&lt;<span class="hljs-keyword">String</span>&gt; d1 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d1.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br><span class="hljs-comment">// 推荐的写法：</span><br>Deque&lt;<span class="hljs-keyword">String</span>&gt; d2 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d2.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br></code></pre></td></tr></table></figure><p>可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。</p><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p><ul><li>将元素添加到队尾或队首：<code>addLast()</code>/<code>offerLast()</code>/<code>addFirst()</code>/<code>offerFirst()</code>；</li><li>从队首／队尾获取元素并删除：<code>removeFirst()</code>/<code>pollFirst()</code>/<code>removeLast()</code>/<code>pollLast()</code>；</li><li>从队首／队尾获取元素但不删除：<code>getFirst()</code>/<code>peekFirst()</code>/<code>getLast()</code>/<code>peekLast()</code>；</li><li>总是调用<code>xxxFirst()</code>/<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li><li>避免把<code>null</code>添加到队列。</li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/18/hello-world/"/>
    <url>/2021/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
