<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2021/03/18/LeetCode/"/>
    <url>/2021/03/18/LeetCode/</url>
    
    <content type="html"><![CDATA[<h2 id="224-基本计算器"><a href="#224-基本计算器" class="headerlink" title="224.基本计算器"></a>224.基本计算器</h2><blockquote><p>2021/03/10 星期三</p></blockquote><blockquote><p>实现一个基本的计算器来计算一个简单的字符串表达式 s 的值。</p><p>示例 1：</p><p>输入：s = “1 + 1”<br>输出：2<br>示例 2：</p><p>输入：s = “ 2-1 + 2 “<br>输出：3<br>示例 3：</p><p>输入：s = “(1+(4+5+2)-3)+(6+8)”<br>输出：23</p><p>提示：</p><p>1 &lt;= s.length &lt;= 3 * 105<br>s 由数字、’+’、’-‘、’(‘、’)’、和 ‘ ‘ 组成<br>s 表示一个有效的表达式</p></blockquote><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/10 - 20:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_224</span>基础计算器 </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-comment">//创建一个栈用来存储符号</span><br>        Deque&lt;Integer&gt; ops = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        ops.push(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = s.length();<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                sign =ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                sign = -ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                ops.push(sign);<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                ops.pop();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//临时存放每一个数字</span><br>                <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (i&lt;n&amp;&amp;Character.isDigit(s.charAt(i)))&#123;<br>                    num = num * <span class="hljs-number">10</span> + s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    i++;<br>                &#125;<br>                <span class="hljs-comment">//实时更新结果</span><br>                result += sign * num;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><span class="hljs-comment">//测试数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;(1+(4+5+2)-3)+(6+8)&quot;</span>;<br>        System.out.println(calculate(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>这道题首先考虑到没有乘除，只有加减运算和括号</p><p>用了栈，sign作为信号，加减，以及括号进栈，用result实时更新计算结果</p><p>这一题的思路：</p><p>用n = s.length;统计string的长度，遍历整个string，</p><p>用s.charAt(i)判断进来的字符是什么</p><p>用else-if语句判断进来的字符属于什么</p><p>如果是空格，则继续下一个字符</p><p>如果是’+’号，则更新sign为正1；</p><p>如果是’-‘号，则更新sign为—ops.peek()，ops.peek()可以使得括号前为’—‘号，则sign的正负相反，若为 ‘+’ 号，则sign值正常；</p><p>如果是’(‘号，则push(sign)更新ops栈里的第一个数字，好用peek()函数检验括号前的符号</p><p>如果是’)’号，则pop()删除ops栈里面的第一个数字，使得括号运算结束</p><hr><blockquote><p><strong>知识点</strong></p><ol><li>Deque容器</li></ol><p> deque容器为一个给定<em><em>**类型*<em><strong>的元素进行</strong>线性处理</em>*，像向量一样，它</em>*</em>*能够快速地随机访问任一个元素*<em><strong>，并且能够高效地</strong></em>*插入和删除*<em><strong>容器的尾部元素。但它又与vector不同，</strong></em>*deque支持高效插入和删除容器的头部元素*<em><strong>，因此也叫做</strong></em>*双端队列****。</p><p><strong>Deque是一个接口，LinkedList 是其实现类</strong></p><ol start="2"><li>LinkedList</li></ol><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>链表可分为单向链表和双向链表。</p><p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png" alt="img"></p><p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png" alt="img"></p><p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p><p>与 ArrayList 相比，LinkedList 的增加和删除对操作效率更高，而查找和修改的操作效率较低。</p><p><strong>以下情况使用 ArrayList :</strong></p><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul><p><strong>以下情况使用 LinkedList :</strong></p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul><ol start="3"><li>String.charAt(int i)</li></ol><p><strong>字符串的第i个字符是什么（从0开始）</strong></p><ol start="4"><li>Character.isDigit(char ch)</li></ol><p><strong>判断字符ch是否为数字，如果是数字，则返回true，反之，false</strong></p></blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265122668445536"><strong>查看Deque的用法和理解</strong></a></p><p><code>Deque</code>是一个接口，它的实现类有<code>ArrayDeque</code>和<code>LinkedList</code>。</p><p>我们发现<code>LinkedList</code>真是一个全能选手，它即是<code>List</code>，又是<code>Queue</code>，还是<code>Deque</code>。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 不推荐的写法:</span><br>LinkedList&lt;<span class="hljs-keyword">String</span>&gt; d1 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d1.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br><span class="hljs-comment">// 推荐的写法：</span><br>Deque&lt;<span class="hljs-keyword">String</span>&gt; d2 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d2.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br></code></pre></td></tr></table></figure><p>可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。</p><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p><ul><li>将元素添加到队尾或队首：<code>addLast()</code>/<code>offerLast()</code>/<code>addFirst()</code>/<code>offerFirst()</code>；</li><li>从队首／队尾获取元素并删除：<code>removeFirst()</code>/<code>pollFirst()</code>/<code>removeLast()</code>/<code>pollLast()</code>；</li><li>从队首／队尾获取元素但不删除：<code>getFirst()</code>/<code>peekFirst()</code>/<code>getLast()</code>/<code>peekLast()</code>；</li><li>总是调用<code>xxxFirst()</code>/<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li><li>避免把<code>null</code>添加到队列。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/18/hello-world/"/>
    <url>/2021/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
