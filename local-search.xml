<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多线程学习</title>
    <link href="/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="多线程的学习"><a href="#多线程的学习" class="headerlink" title="多线程的学习"></a>多线程的学习</h2><h3 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h3><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%AE%E5%BD%95.png"></p><h3 id="2-线程、进程、多线程"><a href="#2-线程、进程、多线程" class="headerlink" title="2.线程、进程、多线程"></a>2.线程、进程、多线程</h3><ol><li>线程(Thread)：线程就是独立的执行路径；</li><li>进程(process)：进程是执行程序的一次执行过程，它是一个动态的概念。<strong>是系统资源分配的单位</strong></li><li>一般一个进程中可以包括多个线程，当然一个进程中至少有一个线程，不然就没有存在的意义。<strong>线程是CPU调度和执行的单位</strong></li></ol><blockquote><p>注意：很多线程是模拟出来的，真正的多线程是只有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所有才有了同时执行的错觉。</p></blockquote><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E7%94%A8%E5%AF%B9%E6%AF%94.png"></p><ul><li>一个进程可以有多个线程，比如视频中有声音，弹幕，图像等等。</li></ul><h3 id="本章核心概念"><a href="#本章核心概念" class="headerlink" title="本章核心概念"></a>本章核心概念</h3><ul><li>线程就是独立的执行路径</li><li>在程序运行时，即使自己没有创建线程，后台也会有多个线程，比如主线程，gc线程(垃圾回收)</li><li>main()称之为主线程，为系统的入口，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的。</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ul><h3 id="3-线程的创建"><a href="#3-线程的创建" class="headerlink" title="3.线程的创建"></a>3.线程的创建</h3><h4 id="三种创建方式"><a href="#三种创建方式" class="headerlink" title="三种创建方式"></a>三种创建方式</h4><ul><li>Thread class        继承Thread类(重点)</li><li>Runnable接口       实现Runnable接口（重点）</li><li>Callable接口          实现Callable接口（了解即可，以后工作可能会用到）</li></ul><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><ul><li>自定义线程类继承 <strong>Thread类</strong></li><li>重写run()方法，编写方法体</li><li>创建线程对象，调用Start（）方法启动线程</li></ul><blockquote><p>线程不一定立刻执行，cpu安排调度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><span class="hljs-comment">//创建线程的方法一：</span><br><span class="hljs-comment">//继承Thread类，重写run()方法，调用start开启线程</span><br><span class="hljs-comment">//总结：注意线程不一定立即执行，由CPU调度执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//重写run方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码，重写run方法&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//调用主线程main</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个线程对象</span><br>        TestThread testThread = <span class="hljs-keyword">new</span> TestThread();<br><br>        <span class="hljs-comment">//调用start()方法开启线程</span><br>        testThread.start();<br><br>        <span class="hljs-comment">//主线程运行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程  &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p><strong>注意</strong></p><ul><li>可以看到是并发执行的。</li><li>调用的是start方法，不是run方法</li></ul><h4 id="网图下载"><a href="#网图下载" class="headerlink" title="网图下载"></a>网图下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestThread2</span><span class="hljs-params">(String url, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        WebDownloader webDownloader = <span class="hljs-keyword">new</span> WebDownloader();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.download(url, name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载的文件名：&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TestThread2 t1 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://b-ssl.duitang.com/uploads/item/201612/07/20161207082313_mN2iJ.thumb.700_0.jpeg&quot;</span>, <span class="hljs-string">&quot;测试1.jpg&quot;</span>);<br>        TestThread2 t2 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/6f061d950a7b0208d1ed7d8563d9f2d3572cc8aa.jpg&quot;</span>, <span class="hljs-string">&quot;测试2.jpg&quot;</span>);<br>        TestThread2 t3 = <span class="hljs-keyword">new</span> TestThread2(<span class="hljs-string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180505%2Fdab71918ecff4797afec962d88985406.jpeg&amp;refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1620268164&amp;t=a294065d113f9d2b3945c77eaf42ad56&quot;</span>, <span class="hljs-string">&quot;测试3.jpg&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//下载器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebDownloader</span></span>&#123;<br><br>    <span class="hljs-comment">//下载方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> URL(url), <span class="hljs-keyword">new</span> File(name));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;IO异常，download方法出现异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>导入一个jar包，commons io  可以百度搜索</li></ul><h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><br>        <span class="hljs-comment">//创建runnable接口的实现类对象</span><br>        TestThread3 testThread3 = <span class="hljs-keyword">new</span> TestThread3();<br>        <span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程代理</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testThread3);<br>        thread.start();<br><br><span class="hljs-comment">//        //或者等于</span><br><span class="hljs-comment">//        new Thread(testThread3).start();</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>继承Thread类</p><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li><strong>不建议使用：避免OOP单继承局限性</strong></li></ul></li><li><p>实现Runnable接口</p><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li><strong>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</strong></li></ul></li></ul><p><img src="E:\dgut\blog\wjx002\source\images\Thread\runnable代理.png"></p><h3 id="初始并发问题"><a href="#初始并发问题" class="headerlink" title="初始并发问题"></a>初始并发问题</h3><ul><li>多个对象同时操作同一个对象</li><li>比如  买车票</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-comment">//初识并发问题</span><br><span class="hljs-comment">//多个线程同时操作一个对象</span><br><span class="hljs-comment">//例如：买车票</span><br><br><br><span class="hljs-comment">//发现问题，多个线程操作同一个资源时，线程不安全，数据紊乱。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNums = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//模拟延时</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="hljs-string">&quot;票&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TestThread4 ticket = <span class="hljs-keyword">new</span> TestThread4();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%984.png"></p><ul><li>发现同一张票被多个人获取到了，这明显不符合火车票的规则，</li><li>线程不安全了，数据紊乱</li></ul><h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><p>案例：龟兔赛跑-Race</p><ol><li>首先定一个赛道距离，然后要离终点越来越近</li><li>判断比赛是否结束</li><li>打印出胜利者</li><li>龟兔赛跑开始</li><li>故事中是乌龟赢的，兔子要睡觉，所以我们来模拟兔子睡觉</li><li>终于，乌龟赢得了比赛</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.demo01;<br><br><span class="hljs-comment">//龟兔赛跑</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. 首先定一个赛道距离，然后要离终点越来越近</span><br><span class="hljs-comment">2. 判断比赛是否结束</span><br><span class="hljs-comment">3. 打印出胜利者</span><br><span class="hljs-comment">4. 龟兔赛跑开始</span><br><span class="hljs-comment">5. 故事中是乌龟赢的，兔子要睡觉，所以我们来模拟兔子睡觉</span><br><span class="hljs-comment">6. 终于，乌龟赢得了比赛</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Race</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String winner;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br><br>            <span class="hljs-comment">//模拟一下兔子休息</span><br>            <span class="hljs-keyword">if</span> (Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>) &amp;&amp; i % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                    System.out.println(<span class="hljs-string">&quot;兔子想睡觉&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-comment">//判断是否游戏结束，true则是出现胜利者了</span><br>            <span class="hljs-keyword">boolean</span> flag = gameOver(i);<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//兔子速度比较快</span><br>            <span class="hljs-keyword">if</span> (Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>)) &#123;<br>                i+=<span class="hljs-number">5</span>;<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;跑了-----&gt;&quot;</span>+i+<span class="hljs-string">&quot;步&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">gameOver</span><span class="hljs-params">(<span class="hljs-keyword">int</span> steps)</span> </span>&#123;<br><br>        <span class="hljs-comment">//判断有没有胜利者</span><br>        <span class="hljs-keyword">if</span> (winner != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//出现胜利者了</span><br>        <span class="hljs-keyword">if</span> (steps == <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-comment">//获取胜利者名字</span><br>            winner = Thread.currentThread().getName();<br>            <span class="hljs-comment">//输出胜利者是谁</span><br>            System.out.println(<span class="hljs-string">&quot;winner is &quot;</span> + winner);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Race race = <span class="hljs-keyword">new</span> Race();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;兔子&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;乌龟&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/Thread/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91.png"></p><h3 id="实现Callable接口（了解即可）"><a href="#实现Callable接口（了解即可）" class="headerlink" title="实现Callable接口（了解即可）"></a>实现Callable接口（了解即可）</h3><ol><li>实现Callable接口，需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务</li><li>提交执行</li><li>获取结果</li><li>关闭服务</li></ol><p><img src="/images/Thread/Callable.png"></p><p><strong>好处</strong></p><ul><li>可以抛出异常</li><li>获取返回值</li></ul><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><p><strong>总结：</strong></p><ul><li>真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实角色</li></ul><p><strong>好处：</strong></p><ul><li>代理对象可以做很多真实对象做不了的事情</li><li>真实对象专注于做自己的事情</li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><ul><li><p>λ希腊字母表中排序第十一位的字母，英语名称lambda</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>其实质属于函数式编程的概念</p><ul><li>(params)-&gt;expression[表达式]</li><li>(params) -&gt; statement[语句]</li><li>(params) -&gt; {statements}</li></ul></li><li><p>为什么要使用lamda表达式</p><ul><li>避免匿名内部类定义过多</li><li>可以使你的代码更简洁</li><li>去除掉一些没有意义的代码，只剩下核心的逻辑部分</li></ul></li><li><p>理解Functional Interface(函数式接口) 是学习java8 lambda表达式的关键所在</p></li><li><p>函数式接口的定义：</p><ul><li>任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口<ul><li>public interface Runnable{</li><li>abstract void Run（）;</li><li>}</li></ul></li><li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lambda;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda</span> </span>&#123;<br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;我喜欢1&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我喜欢2&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        iLove like = <span class="hljs-keyword">new</span> Like();<br>        like.love();<br>        like = <span class="hljs-keyword">new</span> Like2();<br>        like.love();<br>        like = <span class="hljs-keyword">new</span> Like3();<br>        like.love();<br><br>        <span class="hljs-comment">//匿名内部类：没有类的名称，必须借助接口或者父类</span><br>        like = <span class="hljs-keyword">new</span> iLove() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我喜欢333&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        like = ()-&gt; System.out.println(<span class="hljs-string">&quot;我喜欢22&quot;</span>);<br><br>        <span class="hljs-comment">//总结：</span><br>        <span class="hljs-comment">//lambda表达式只能在一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</span><br>        <span class="hljs-comment">//前提接口是函数式接口，就是接口里只有一个函数</span><br>        <span class="hljs-comment">//多个函数也可以去掉参数类型，要去掉就都去掉，必须加上括号</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">iLove</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//首先可以是内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">iLove</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>//总结：<pre><code>//lambda表达式只能在一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹//前提接口是函数式接口，就是接口里只有一个函数//多个函数也可以去掉参数类型，要去掉就都去掉，必须加上括号</code></pre></li></ul><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>五个状态：</p><ul><li>创建状态</li><li>就绪状态</li><li>阻塞状态</li><li>运行状态</li><li>死亡状态</li></ul><h4 id="线程的转换过程"><a href="#线程的转换过程" class="headerlink" title="线程的转换过程"></a>线程的转换过程</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png"></p><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%AE%9E%E9%99%85%E8%BD%AC%E6%8D%A2.png"></p><h4 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setPriority（int newPriority)</td><td>更改线程的优先级</td></tr><tr><td>static void sleep(long millis)</td><td>在指定的毫秒内让当前正在执行的线程休眠</td></tr><tr><td>void join()</td><td>等待该线程终止</td></tr><tr><td>static void yield()</td><td>暂停当前正在执行的线程对象，并执行其他线程</td></tr><tr><td>void interrupt()</td><td>中断线程，别用这种方式</td></tr><tr><td>boolean isAlive()</td><td>测试线程是否处于活动状态</td></tr></tbody></table><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p><img src="/images/Thread/%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><br><span class="hljs-comment">//测试stop</span><br><span class="hljs-comment">//1.建议线程正常停止----&gt;利用次数，不建议死循环</span><br><span class="hljs-comment">//建议使用标志位-----&gt;设置一个标志位</span><br><span class="hljs-comment">//3.不要使用stop或者destroy等过时或者JDk不建议使用的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testStop</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//1.设置一个标志位</span><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br><br>    <span class="hljs-comment">//转换标志位</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;run Thread &quot;</span> + i++);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        testStop testStop = <span class="hljs-keyword">new</span> testStop();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testStop);<br>        <span class="hljs-comment">//开启线程</span><br>        thread.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main线程&quot;</span> + i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9900</span>) &#123;<br>                <span class="hljs-comment">//当主线程i等于990时，停止线程</span><br>                testStop.stop();<br>                System.out.println(<span class="hljs-string">&quot;线程终止了&quot;</span>);<br>            &#125;<br><br>            ;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0.png"></p><ul><li>sleep(时间) 指定当前线程的阻塞的毫秒数</li><li>sleeo存在异常interruptedException</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep时间可以模拟网络延时，倒计时等</li><li>每个对象都有一个锁lock，sleep不会释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//模拟倒计时</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testSleep2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timeDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(num--);<br><br>            <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//打印当前系统时间</span><br>        <span class="hljs-comment">//获取当前系统时间</span><br>        Date startTime = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<br><br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                startTime = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//模拟网络延时: 放大问题的发生性</span><br><br><br><span class="hljs-keyword">import</span> com.jiaxu.demo01.Race;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testSleep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNums = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>            <span class="hljs-comment">//模拟延时</span><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="hljs-string">&quot;票&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        testSleep testSleep = <span class="hljs-keyword">new</span> testSleep();<br>        <span class="hljs-keyword">new</span> Thread(testSleep,<span class="hljs-string">&quot;小米&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(testSleep,<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(testSleep, <span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><ul><li>礼让线程，让当前正在执行的线程暂停，但是不阻塞</li><li>将线程从运行 状态转为就绪状态</li><li><strong>让cpu重新调度，礼让不一定成功！！！看CPU心情</strong></li></ul><p><strong>Thread.yield</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testYield</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyYield myYield = <span class="hljs-keyword">new</span> MyYield();<br><br>        <span class="hljs-keyword">new</span> Thread(myYield, <span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(myYield, <span class="hljs-string">&quot;b&quot;</span>).start();<br>        <br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyYield</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程开始执行&quot;</span>);<br>        <span class="hljs-comment">//线程礼让</span><br>        Thread.yield();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程终止执行&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>线程礼让</li></ul><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9.png"></p><ul><li>不礼让的情况下</li></ul><p><img src="/images/Thread/%E4%B8%8D%E7%A4%BC%E8%AE%A9.png"></p><h4 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h4><p><strong>Join</strong></p><ul><li>Join合并线程，待此线程执行完毕，再执行其他线程，其他线程阻塞</li><li>可以想象成插队</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//测试join方法</span><br><span class="hljs-comment">//想象成插队</span><br><br><span class="hljs-keyword">import</span> com.sun.javafx.sg.prism.web.NGWebView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testJoin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br><br>            System.out.println(<span class="hljs-string">&quot;线程vip来了&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        testJoin testJoin = <span class="hljs-keyword">new</span> testJoin();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(testJoin);<br>        thread.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">200</span>) &#123;<br>                thread.join();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;main线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程观测状态"><a href="#线程观测状态" class="headerlink" title="线程观测状态"></a>线程观测状态</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E8%A7%82%E6%B5%8B%E8%BD%AC%E6%80%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testState</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <br><br>            System.out.println(<span class="hljs-string">&quot;//////////&quot;</span>);<br><br>        &#125;);<br><br><br>        <span class="hljs-comment">//观察状态</span><br>        Thread.State state = thread.getState();<br>        <span class="hljs-comment">//输出状态</span><br>        System.out.println(state);<br><br>        <span class="hljs-comment">//观察启动后</span><br>        thread.start();<br>        state = thread.getState();<span class="hljs-comment">//更新状态</span><br>        System.out.println(state);<br><br>        <span class="hljs-comment">//只要线程不结束，则一直输出线程状态</span><br>        <span class="hljs-keyword">while</span> (state != Thread.State.TERMINATED) &#123;<br><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//更新线程状态</span><br>            state = thread.getState();<br>            <span class="hljs-comment">//输出线程状态</span><br>            System.out.println(state);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>死亡状态后不可以在启动线程 了</strong></p><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><ul><li>线程优先级高不一定先执行，只不过是执行的可能性高了</li><li>看cpu调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><span class="hljs-comment">//测试线程的优先级</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testPriority</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//主线程默认优先级</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + Thread.currentThread().getPriority());<br><br>        MyPriority myPriority = <span class="hljs-keyword">new</span> MyPriority();<br><br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread3 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread4 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread5 = <span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread thread6 = <span class="hljs-keyword">new</span> Thread(myPriority);<br><br>        <span class="hljs-comment">//设置优先级，在启动</span><br>        thread1.start();<br><br>        thread2.setPriority(<span class="hljs-number">1</span>);<br>        thread2.start();<br>        <br><br>        thread3.setPriority(Thread.MAX_PRIORITY);<br>        thread3.start();<br><br>        thread4.setPriority(<span class="hljs-number">7</span>);<br>        thread4.start();<br><br>        thread5.setPriority(<span class="hljs-number">4</span>);<br>        thread5.start();<br><br>        thread6.setPriority(<span class="hljs-number">3</span>);<br>        thread6.start();<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//输出线程的优先级</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-----&gt;&quot;</span> + Thread.currentThread().getPriority());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码显示结果</strong></p><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%E6%AF%94%E8%BE%83.png"></p><h4 id="守护线程（daemon）"><a href="#守护线程（daemon）" class="headerlink" title="守护线程（daemon）"></a>守护线程（daemon）</h4><ul><li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕（gc垃圾回收）</li><li>如后台记录操作日志、监控内存、垃圾回收等待..</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.state;<br><br><span class="hljs-comment">//测试守护线程</span><br><span class="hljs-comment">//上帝保护你</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testDaemon</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        God god = <span class="hljs-keyword">new</span> God();<br>        You you = <span class="hljs-keyword">new</span> You();<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(god);<br>        thread.setDaemon(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//默认是false表示是用户线程</span><br>        <span class="hljs-comment">//正常线程都是用户线程</span><br><br>        thread.start();<span class="hljs-comment">//开启守护线程</span><br>        <span class="hljs-keyword">new</span> Thread(you).start();<span class="hljs-comment">//开启用户线程...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//上帝</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;上帝保佑你&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//你</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36500</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你开心的活着&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=========goodbye! world!======&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><ul><li>多个线程操作同一个资源</li><li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步，线程同步就是一种等待机制，多个需要同时访问此对象的线程进入到这个<strong>对象的线程池</strong>形成队列，等待前面线程使用完毕，下一个线程再使用</li><li>由于同一进程的多个线程共享一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问的正确性，在访问是加入<strong>锁机制 synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换 ，和 调度延时，引起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li></ul></li></ul><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><ul><li>同一个对象被多个线程同时操作</li></ul><h5 id="队列和锁"><a href="#队列和锁" class="headerlink" title="队列和锁"></a>队列和锁</h5><ul><li>保证线程同步的安全性</li></ul><h4 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h4><ul><li>买车票</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnselfBuyTicket</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BuyTicket buyTicket = <span class="hljs-keyword">new</span> BuyTicket();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;小米&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;小孩&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;黄牛&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//标志位</span><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//买票</span><br>        <span class="hljs-keyword">if</span> (ticket &lt;= <span class="hljs-number">0</span>) &#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟延时</span><br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//买一张就少一张</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;买了第&quot;</span> + ticket-- + <span class="hljs-string">&quot;张票&quot;</span>);<br><br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                buy();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>银行取钱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-comment">//不安全的取钱</span><br><span class="hljs-comment">//两个人去银行取钱</span><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBank</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Account account = <span class="hljs-keyword">new</span> Account(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br>        Drawing wo = <span class="hljs-keyword">new</span> Drawing(account, <span class="hljs-number">50</span>, <span class="hljs-string">&quot;wo&quot;</span>);<br>        Drawing girl = <span class="hljs-keyword">new</span> Drawing(account, <span class="hljs-number">100</span>,<span class="hljs-string">&quot;girl&quot;</span>);<br><br>        wo.start();<br>        girl.start();<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-comment">//余额</span><br>    <span class="hljs-keyword">int</span> money;<br>    <span class="hljs-comment">//卡名</span><br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//银行：模拟取款</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    Account account;<span class="hljs-comment">//取钱账户</span><br><br>    <span class="hljs-comment">//取了多少钱</span><br>    <span class="hljs-keyword">int</span> drawingMoney;<br><br>    <span class="hljs-comment">//手里有多少钱</span><br>    <span class="hljs-keyword">int</span> nowMoney;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-keyword">int</span> drawingMoney, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        <span class="hljs-keyword">this</span>.account = account;<br>        <span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;<br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//判断有没有钱</span><br>        <span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;钱不够了&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//卡的余额 = 余额 - 你取的钱</span><br>        account.money = account.money - drawingMoney;<br>        <span class="hljs-comment">//手里的钱</span><br><br>        nowMoney = nowMoney + drawingMoney;<br>        System.out.println(account.name + <span class="hljs-string">&quot;余额为：&quot;</span> + account.money);<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;手里的钱&quot;</span> + nowMoney);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>list</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.syncronized;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(Thread.currentThread().getName());<br>            &#125;).start();<br><br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(list.size());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><ul><li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对一天机制，这套机制就是synchronized关键字，他包括两种用法：<ul><li>synchronized方法和synchronized块</li><li>同步方法：public synchronized void method（int args）{}</li></ul></li><li>synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，后面被阻塞的线程才能获得这个锁，继续执行<ul><li>缺陷：若将一个大的方法申明为synchronized将影响效率</li></ul></li></ul><h4 id="同步方法弊端"><a href="#同步方法弊端" class="headerlink" title="同步方法弊端"></a>同步方法弊端</h4><p><img src="/images/Thread/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%BC%8A%E7%AB%AF.png"></p><h4 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h4><p><img src="E:\dgut\blog\wjx002\source\images\Thread\同步块.png"></p><p><strong>锁的对象是要修改的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (list) &#123;<br>    list.add(Thread.currentThread().getName());<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才可以运行，而且导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<strong>两个以上对象的锁</strong>时，就可能发生”死锁“的问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lock;<br><br><span class="hljs-comment">//死锁：一个同步块拥有两个或两个以上的对象的锁，才有可能发生</span><br><span class="hljs-comment">//互相占有其他线程需要的资源，等待其他线程释放资源才可以运行，</span><br><span class="hljs-comment">//导致停止执行的情形</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        MakeUp person1 = <span class="hljs-keyword">new</span> MakeUp(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;火姑娘&quot;</span>);<br>        MakeUp person2 = <span class="hljs-keyword">new</span> MakeUp(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br>        person1.start();<br>        person2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//化妆品类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lipstick</span></span>&#123;<br><br>&#125;<br><br><br><span class="hljs-comment">//镜子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mirror</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//化妆执行</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-comment">//保证需要的资源只有一份，用static来保证只有一份</span><br>    <span class="hljs-keyword">static</span> Lipstick lipstick = <span class="hljs-keyword">new</span> Lipstick();<br>    <span class="hljs-keyword">static</span> Mirror mirror = <span class="hljs-keyword">new</span> Mirror();<br><br>    <span class="hljs-comment">//选择</span><br>    <span class="hljs-keyword">int</span> choice;<br>    <span class="hljs-comment">//化妆的人</span><br>    String girl;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MakeUp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> choice, String girl)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.choice = choice;<br>        <span class="hljs-keyword">this</span>.girl = girl;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//运行化妆方法</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            makeup();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//化妆方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-comment">//开始化妆</span><br>            <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>                <span class="hljs-comment">//获取到了口红的锁</span><br>                System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>                    <span class="hljs-comment">//获取到了镜子的锁</span><br>                    System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//开始化妆</span><br>            <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>                <span class="hljs-comment">//获取到了镜子的锁</span><br>                System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>                    <span class="hljs-comment">//获取到了口红的锁</span><br>                    System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这样就发生了死锁、</p></blockquote><p><img src="/images/Thread/%E6%AD%BB%E9%94%81.png"></p><blockquote><p>一个同步块里面有了两个对象的锁，并且还互相持有对方的资源不放手，导致程序停止</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) &#123;<br><br>           <span class="hljs-comment">//开始化妆</span><br>           <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>               <span class="hljs-comment">//获取到了口红的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>               Thread.sleep(<span class="hljs-number">1000</span>);<br><br>           &#125;<br>           <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>               <span class="hljs-comment">//获取到了镜子的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">//开始化妆</span><br>           <span class="hljs-keyword">synchronized</span> (mirror) &#123;<br>               <span class="hljs-comment">//获取到了镜子的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了镜子的锁&quot;</span>);<br>               Thread.sleep(<span class="hljs-number">1000</span>);<br><br>           &#125;<br>           <span class="hljs-keyword">synchronized</span> (lipstick) &#123;<br>               <span class="hljs-comment">//获取到了口红的锁</span><br>               System.out.println(<span class="hljs-keyword">this</span>.girl + <span class="hljs-string">&quot;拿到了口红的锁&quot;</span>);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><blockquote><p>解决方法就是使同一个代码块里不要有互相持有对方资源的多个对象</p></blockquote><p><img src="/images/Thread/%E4%B8%8D%E6%AD%BB%E9%94%81.png" alt="正常应该的运行"></p><h4 id="死锁避免方法"><a href="#死锁避免方法" class="headerlink" title="死锁避免方法"></a>死锁避免方法</h4><ul><li>产生死锁的四个必要条件：<ul><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求和保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程已获得的资源，在未使用完前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾衔接的循环等待资源关系。</li></ul></li></ul><p><strong>只要我们破获其中的任意一种或多个条件就可以避免死锁的发生</strong></p><h3 id="lock（锁）"><a href="#lock（锁）" class="headerlink" title="lock（锁）"></a>lock（锁）</h3><ul><li>从JDK5.0开始，java提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。同步锁使用Lock对象充当</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象进行加锁，线程开始访问共享资源之前应先获得Lock对象</li><li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显示加锁，释放锁。</li></ul><blockquote><p>ReentrantLock  可重入锁</p></blockquote><p><img src="/images/Thread/%E9%94%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.lock;<br><br><span class="hljs-keyword">import</span> java.text.BreakIterator;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">reenTrantLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BuyTickey buyTickey = <span class="hljs-keyword">new</span> BuyTickey();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br>        <span class="hljs-keyword">new</span> Thread(buyTickey).start();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//还是用买火车票的例子</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyTickey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">int</span> ticketNum = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//定义可重入锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (ticketNum &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br><br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                System.out.println(ticketNum--);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="synchronized-与Lock-的对比"><a href="#synchronized-与Lock-的对比" class="headerlink" title="synchronized 与Lock 的对比"></a>synchronized 与Lock 的对比</h4><ul><li>Lock是显式锁（手动开启和关闭锁，别忘了关闭锁）synchronized是隐式锁，除了作用域自动释放</li><li>Lock锁只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费更少的时间来调度线程性能更好。并且具有更好的延展性（提供更多的子类）</li><li>优先使用顺序：<ul><li>Lock &gt; 同步代码块（已经进入方法体，分配了相应的资源） &gt; 同步方法（在方法体之外）</li></ul></li></ul><h4 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h4><ul><li>生产者消费者模式</li></ul><h4 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h4><ul><li>应用场景：生产者消费者问题<ul><li>假设仓库只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费</li><li>如果仓库里没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</li><li>仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库里再次放入产品为止</li></ul></li></ul><p><img src="E:\dgut\blog\wjx002\source\images\Thread\线程通信分析.png"></p><ul><li>java提供了几个方法解决线程之间的通信问题</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，知道其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notityAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级高的线程优先调度</td></tr></tbody></table><p><strong>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常lllegalMonitorStateException</strong></p><h4 id="解决方式1"><a href="#解决方式1" class="headerlink" title="解决方式1"></a>解决方式1</h4><p>并发协作模型“生产者/消费者模式”—&gt;管理法</p><ul><li>生产者：负责生产数据的模型（可能是方法、对象、线程、进程）；</li><li>消费者：负责处理数据的模块（可能是方法、对象、线程、进程）；</li><li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区”</li></ul><p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p><p><img src="/images/Thread/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85.png"></p><h4 id="解决方式2"><a href="#解决方式2" class="headerlink" title="解决方式2"></a>解决方式2</h4><ul><li>并发协作模型“生产者/消费者模式”—-&gt;信号灯法</li></ul><p>解决方法一：代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.model.productAndConsumer;<br><br><span class="hljs-comment">//管程法</span><br><span class="hljs-comment">//生产者消费者模型</span><br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">process</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SynContainer synContainer = <span class="hljs-keyword">new</span> SynContainer();<br>        <span class="hljs-keyword">new</span> Product(synContainer).start();<br>        <span class="hljs-keyword">new</span> Consumer(synContainer).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//生产鸡</span><br>    SynContainer synContainer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Product</span><span class="hljs-params">(SynContainer synContainer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.synContainer = synContainer;<br>    &#125;<br><br><br>    <span class="hljs-comment">//生产</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;生产了&quot;</span> + i + <span class="hljs-string">&quot;只鸡&quot;</span>);<br>            synContainer.push(<span class="hljs-keyword">new</span> Chicken(i));<br>        &#125;<br>                <br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    SynContainer synContainer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(SynContainer synContainer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.synContainer = synContainer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消费了第&quot;</span>+synContainer.pop().id+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//产品</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chicken</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chicken</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynContainer</span> </span>&#123;<br>    <span class="hljs-comment">//放产品的地方</span><br>    <span class="hljs-comment">//对象数组 指定大小</span><br>    Chicken[] chickens = <span class="hljs-keyword">new</span> Chicken[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//统计鸡的数量</span><br>    <span class="hljs-keyword">int</span> account = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//生产者放入产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Chicken chicken)</span>  </span>&#123;<br><br>        <span class="hljs-comment">//鸡放满了，只能消费 生产停止</span><br>        <span class="hljs-keyword">if</span> (account &gt;= chickens.length-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//否则就没有满</span><br>        <span class="hljs-comment">//没有满就继续放鸡</span><br>        chickens[account] = chicken;<br>        account++;<br>        <span class="hljs-comment">//通知消费者消费</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br><br>    &#125;<br><br>    <span class="hljs-comment">//消费者放入产品</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title">pop</span><span class="hljs-params">()</span>  </span>&#123;<br>        <span class="hljs-comment">//如果没有鸡了，消费者停止</span><br>        <span class="hljs-keyword">if</span> (account &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        account--;<br>        Chicken chicken = chickens[account];<br><br>        <span class="hljs-comment">//唤醒生产者</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br><br>        <span class="hljs-keyword">return</span> chicken;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法2：信号灯法</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.model.productAndConsumer;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<br><br><span class="hljs-comment">//信号灯法</span><br><span class="hljs-comment">//通过一个flag来调度</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Semaphore</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TV tv = <span class="hljs-keyword">new</span> TV();<br>        <span class="hljs-keyword">new</span> Actor(tv).start();<br>        <span class="hljs-keyword">new</span> watch(tv).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//演员</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    TV tv;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span><span class="hljs-params">(TV tv)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tv = tv;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;快乐大本营&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;抖音：记录美好生活&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//观看者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">watch</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    TV tv;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">watch</span><span class="hljs-params">(TV tv)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tv = tv;<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">this</span>.tv.watch();<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//电视剧</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TV</span> </span>&#123;<br>    <span class="hljs-comment">//演员表演，观众等待 T</span><br>    <span class="hljs-comment">//观众观看，演员等待F</span><br>    String vedio;<br><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-comment">//表演</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String vedio)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;演员表演了：&quot;</span> + vedio);<br>        <span class="hljs-comment">//通知观众观看</span><br>        <span class="hljs-keyword">this</span>.notify();<br>        <span class="hljs-keyword">this</span>.vedio = vedio;<br>        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;<br>    &#125;<br><br>    <span class="hljs-comment">//观看</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watch</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;观众观看了：&quot;</span> + vedio);<br>        <span class="hljs-comment">//通知演员表演</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><ul><li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</li><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。</li><li>好处：<ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理（……）<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAlivaTime：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul></li></ul><p><img src="/images/Thread/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu.theadpool;<br><br><span class="hljs-comment">//测试线程池</span><br><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建服务，创建线程池</span><br>       <span class="hljs-comment">//Executors.newFixedThreadPool(10)参数是线程池的大小</span><br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><br>        <span class="hljs-comment">//执行</span><br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br><br>        <span class="hljs-comment">//关闭连接</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1006笨阶乘</title>
    <link href="/2021/04/01/1006%E7%AC%A8%E9%98%B6%E4%B9%98/"/>
    <url>/2021/04/01/1006%E7%AC%A8%E9%98%B6%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><blockquote><p>通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。</p><p>相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。</p><p>例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p><p>另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。</p><p>实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：4<br>输出：7<br>解释：7 =<span class="hljs-number"> 4 </span>*<span class="hljs-number"> 3 </span>/<span class="hljs-number"> 2 </span>+ 1<br></code></pre></td></tr></table></figure><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">每四个一个循环，顺序是* / + -，所以用 <span class="hljs-keyword">index</span> 对 四 进行取余<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">0</span>  *<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">1</span>  /<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">2</span>  +<br>即 <span class="hljs-keyword">index</span>%<span class="hljs-number">4</span> == <span class="hljs-number">3</span>  -<br><br>我们可以选择用栈来存储乘法除法之后的结果，在用 加  减 来计算数据<br></code></pre></td></tr></table></figure><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_1006</span>笨阶乘 </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">int</span> <span class="hljs-title">clumsy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        stack.push(N);<br>        N--;<br>        <span class="hljs-comment">//用于计算下一个计算法是什么</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (N &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//将计算完的内容存入栈中</span><br>            <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>                stack.push(stack.pop() * N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>) &#123;<br>                stack.push(stack.pop() / N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">2</span>) &#123;<br>                stack.push(N);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>) &#123;<br>                stack.push(-N);<br>            &#125;<br>            N--;<br>            index++;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            sum += stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        _1006笨阶乘 example = <span class="hljs-keyword">new</span> _1006笨阶乘();<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">10</span>;<br>        System.out.println(example.clumsy(<span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>59螺旋矩阵2</title>
    <link href="/2021/03/20/59%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B52/"/>
    <url>/2021/03/20/59%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B52/</url>
    
    <content type="html"><![CDATA[<h2 id="59、螺旋矩阵2"><a href="#59、螺旋矩阵2" class="headerlink" title="59、螺旋矩阵2"></a>59、螺旋矩阵2</h2><blockquote><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p></blockquote><p><img src="D:\study\typora\截图\实例.png"></p><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：n = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[[1,2,3],[8,9,4],[7,6,5]]</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>思路：</strong></p><p>按照上一行—&gt;右一列—-&gt;下一行—–&gt;左一列的思路来做</p><p>用left  right top down来记录上下左右的位置</p><p>每次遍历外一圈之后，上下左右相应增减</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> com.sun.deploy.panel.ITreeNode;<br><span class="hljs-keyword">import</span> sun.security.util.Length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>:2021/3/20 - 19:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_59</span>螺旋矩阵2 </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] generataMatrix(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-comment">//n*n数组第一个数是1开始的</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//创建一个n*n的二维数组</span><br>        <span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        <span class="hljs-comment">//记录左边，上边，右边，下边移动到哪里了</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> down = n - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//开始遍历且输出数组</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= down) &#123;<br>            <span class="hljs-comment">//输出上面一行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = left; column &lt;= right; column++) &#123;<br>                array[top][column] = num;<br>                num++;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                1 2 3 4</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>            <span class="hljs-comment">//输出右边一列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = top + <span class="hljs-number">1</span>; row &lt;= down; row++) &#123;<br>                array[row][right] = num;<br>                num++;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                5</span><br><span class="hljs-comment">                6</span><br><span class="hljs-comment">                7</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (left &lt; right &amp;&amp; top &lt; down) &#123;<br>                <span class="hljs-comment">//倒着输出下面一行</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = right - <span class="hljs-number">1</span>; column &gt; left; column--) &#123;<br><br>                    array[down][column] = num;<br>                    num++;<br>                &#125;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    8</span><br><span class="hljs-comment">                   9</span><br><span class="hljs-comment">                 10</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-comment">//倒着获取左一列</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = down; row &gt; top; row--) &#123;<br>                    array[row][left] = num;<br>                    num++;<br>                &#125;<br>            &#125;<br>            left++;<br>            right--;<br>            top++;<br>            down--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        array = generataMatrix(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] ints : array) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> anInt : ints) &#123;<br>                System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-LeedCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计哈希集合</title>
    <link href="/2021/03/18/%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88-1/"/>
    <url>/2021/03/18/%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88-1/</url>
    
    <content type="html"><![CDATA[<h2 id="705-设计哈希集合"><a href="#705-设计哈希集合" class="headerlink" title="705.设计哈希集合"></a>705.设计哈希集合</h2><blockquote><p>2021/02/14 星期日</p></blockquote><blockquote><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 MyHashSet 类：</p><p>void add(key) 向哈希集合中插入值 key 。<br>bool contains(key) 返回哈希集合中是否存在这个值 key 。<br>void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</p><p>示例：</p><p>输入：<br>[“MyHashSet”, “add”, “add”, “contains”, “contains”, “add”, “contains”, “remove”, “contains”]<br>[[], [1], [2], [1], [3], [2], [2], [2], [2]]<br>输出：<br>[null, null, null, true, false, null, true, null, false]</p><p>解释：<br>MyHashSet myHashSet = new MyHashSet();<br>myHashSet.add(1);      // set = [1]<br>myHashSet.add(2);      // set = [1, 2]<br>myHashSet.contains(1); // 返回 True<br>myHashSet.contains(3); // 返回 False ，（未找到）<br>myHashSet.add(2);      // set = [1, 2]<br>myHashSet.contains(2); // 返回 True<br>myHashSet.remove(2);   // set = [1]<br>myHashSet.contains(2); // 返回 False ，（已移除）</p><p>提示：</p><p>0 &lt;= key &lt;= 106<br>最多调用 104 次 add、remove 和 contains 。</p></blockquote><p><strong>简单数组解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashSet</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span>[] nodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">1000009</span>];<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        nodes[key] = <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        nodes[key] = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nodes[key];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>链表解法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> java.security.Key;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/14 - 20:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_705</span>哈希集合 </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Your MyHashSet object will be instantiated and called as such:</span><br><span class="hljs-comment">     * MyHashSet obj = new MyHashSet();</span><br><span class="hljs-comment">     * obj.add(key);</span><br><span class="hljs-comment">     * obj.remove(key);</span><br><span class="hljs-comment">     * boolean param_3 = obj.contains(key);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> BASE = <span class="hljs-number">769</span>;<br>    <span class="hljs-keyword">private</span> LinkedList[] data;<span class="hljs-comment">//链表数组？</span><br>    <span class="hljs-keyword">public</span> _705哈希集合()&#123;<span class="hljs-comment">//初始化</span><br>        data = <span class="hljs-keyword">new</span> LinkedList[BASE];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; BASE; i++) &#123;<br>            data[i] = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 添加操作</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-comment">//通过hash计算出要放在哪个链表数组里的下标</span><br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        <span class="hljs-comment">//创建一个链表的迭代器，来接收链表的内容</span><br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-comment">//判断链表的的内容是否还有下一个</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-comment">//将链表的内容赋予element</span><br>            Integer element = iterator.next();<br>            <span class="hljs-comment">//如果内容相等，则返回空，不做操作</span><br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果内容不相同，则添加入链表</span><br>        data[h].offerLast(key);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Integer element = iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                data[h].remove(element);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> h = hash(key);<br>        Iterator&lt;Integer&gt; iterator = data[h].iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Integer element = iterator.next();<br>            <span class="hljs-keyword">if</span> (element == key) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key % BASE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        _705哈希集合 hashtable = <span class="hljs-keyword">new</span> _705哈希集合();<br>        hashtable.add(<span class="hljs-number">1</span>);<br>        hashtable.add(<span class="hljs-number">2</span>);<br>        hashtable.add(<span class="hljs-number">3</span>);<br>        hashtable.add(<span class="hljs-number">4</span>);<br><br>        System.out.println(hashtable.contains(<span class="hljs-number">1</span>));<br>        hashtable.remove(<span class="hljs-number">1</span>);<br>        System.out.println(hashtable.contains(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2021/03/18/LeetCode/"/>
    <url>/2021/03/18/LeetCode/</url>
    
    <content type="html"><![CDATA[<h2 id="224-基本计算器"><a href="#224-基本计算器" class="headerlink" title="224.基本计算器"></a>224.基本计算器</h2><blockquote><p>2021/03/10 星期三</p></blockquote><blockquote><p>实现一个基本的计算器来计算一个简单的字符串表达式 s 的值。</p><p>示例 1：</p><p>输入：s = “1 + 1”<br>输出：2<br>示例 2：</p><p>输入：s = “ 2-1 + 2 “<br>输出：3<br>示例 3：</p><p>输入：s = “(1+(4+5+2)-3)+(6+8)”<br>输出：23</p><p>提示：</p><p>1 &lt;= s.length &lt;= 3 * 105<br>s 由数字、’+’、’-‘、’(‘、’)’、和 ‘ ‘ 组成<br>s 表示一个有效的表达式</p></blockquote><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jiaxu;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>：吴家旭</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>：2021/3/10 - 20:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_224</span>基础计算器 </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-comment">//创建一个栈用来存储符号</span><br>        Deque&lt;Integer&gt; ops = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        ops.push(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = s.length();<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                sign =ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                sign = -ops.peek();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                ops.push(sign);<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                ops.pop();<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//临时存放每一个数字</span><br>                <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (i&lt;n&amp;&amp;Character.isDigit(s.charAt(i)))&#123;<br>                    num = num * <span class="hljs-number">10</span> + s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    i++;<br>                &#125;<br>                <span class="hljs-comment">//实时更新结果</span><br>                result += sign * num;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><span class="hljs-comment">//测试数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;(1+(4+5+2)-3)+(6+8)&quot;</span>;<br>        System.out.println(calculate(s));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>这道题首先考虑到没有乘除，只有加减运算和括号</p><p>用了栈，sign作为信号，加减，以及括号进栈，用result实时更新计算结果</p><p>这一题的思路：</p><p>用n = s.length;统计string的长度，遍历整个string，</p><p>用s.charAt(i)判断进来的字符是什么</p><p>用else-if语句判断进来的字符属于什么</p><p>如果是空格，则继续下一个字符</p><p>如果是’+’号，则更新sign为正1；</p><p>如果是’-‘号，则更新sign为—ops.peek()，ops.peek()可以使得括号前为’—‘号，则sign的正负相反，若为 ‘+’ 号，则sign值正常；</p><p>如果是’(‘号，则push(sign)更新ops栈里的第一个数字，好用peek()函数检验括号前的符号</p><p>如果是’)’号，则pop()删除ops栈里面的第一个数字，使得括号运算结束</p><hr><blockquote><p><strong>知识点</strong></p><ol><li>Deque容器</li></ol><p> deque容器为一个给定<em><em>**类型*<em><strong>的元素进行</strong>线性处理</em>*，像向量一样，它</em>*</em>*能够快速地随机访问任一个元素*<em><strong>，并且能够高效地</strong></em>*插入和删除*<em><strong>容器的尾部元素。但它又与vector不同，</strong></em>*deque支持高效插入和删除容器的头部元素*<em><strong>，因此也叫做</strong></em>*双端队列****。</p><p><strong>Deque是一个接口，LinkedList 是其实现类</strong></p><ol start="2"><li>LinkedList</li></ol><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>链表可分为单向链表和双向链表。</p><p>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/408px-Singly-linked-list.svg_.png" alt="img"></p><p>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/06/610px-Doubly-linked-list.svg_.png" alt="img"></p><p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。</p><p>与 ArrayList 相比，LinkedList 的增加和删除对操作效率更高，而查找和修改的操作效率较低。</p><p><strong>以下情况使用 ArrayList :</strong></p><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul><p><strong>以下情况使用 LinkedList :</strong></p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul><ol start="3"><li>String.charAt(int i)</li></ol><p><strong>字符串的第i个字符是什么（从0开始）</strong></p><ol start="4"><li>Character.isDigit(char ch)</li></ol><p><strong>判断字符ch是否为数字，如果是数字，则返回true，反之，false</strong></p></blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265122668445536"><strong>查看Deque的用法和理解</strong></a></p><p><code>Deque</code>是一个接口，它的实现类有<code>ArrayDeque</code>和<code>LinkedList</code>。</p><p>我们发现<code>LinkedList</code>真是一个全能选手，它即是<code>List</code>，又是<code>Queue</code>，还是<code>Deque</code>。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 不推荐的写法:</span><br>LinkedList&lt;<span class="hljs-keyword">String</span>&gt; d1 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d1.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br><span class="hljs-comment">// 推荐的写法：</span><br>Deque&lt;<span class="hljs-keyword">String</span>&gt; d2 = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedList</span>&lt;&gt;();<br>d2.offerLast(<span class="hljs-string">&quot;z&quot;</span>);<br></code></pre></td></tr></table></figure><p>可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。</p><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p><ul><li>将元素添加到队尾或队首：<code>addLast()</code>/<code>offerLast()</code>/<code>addFirst()</code>/<code>offerFirst()</code>；</li><li>从队首／队尾获取元素并删除：<code>removeFirst()</code>/<code>pollFirst()</code>/<code>removeLast()</code>/<code>pollLast()</code>；</li><li>从队首／队尾获取元素但不删除：<code>getFirst()</code>/<code>peekFirst()</code>/<code>getLast()</code>/<code>peekLast()</code>；</li><li>总是调用<code>xxxFirst()</code>/<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li><li>避免把<code>null</code>添加到队列。</li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/18/hello-world/"/>
    <url>/2021/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
